import json
import re
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
from datetime import datetime as dat
from datetime import date as da
from datetime import time as ti

url_id = 'https://vk.com/id'

# Default buttons
to_begin = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
cancel1 = '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'
see_my_e = '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'
x = ['–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']
agree = ['–ü–æ–π–¥—É –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ']
button_opt = ['–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ']
bgc_button_opt = ['–°–æ–∑–¥–∞—Ç—å –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                  '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']
show_org = '–ú–æ–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏'
show_all = '—á–æ –ø–æ —á–µ–º?'
spam = '–†–∞—Å—Å—ã–ª–∫–∞'
spam_succ = '–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞!'

# Default messages from bot
hi_from_bot = ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?\n"
"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–µ –∏–∑ –Ω–∏—Ö –∏ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏üôÇ."
"–ê –µ—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏\n"
'\n\n–¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ - –æ–Ω–∏ –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º\n'
"üìå–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä—è–¥–æ–º —Å–æ —Å–º–∞–π–ª–æ–º. "
"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
choice_e = '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –¥–∞—Ç—É, –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:\n'
confirm = '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '
wrong = ('üòî –Ø –Ω–µ –º–æ–≥—É –≤–∞—Å –ø–æ–Ω—è—Ç—å\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞:\n'
'üìå –û—Ç–∫—Ä–æ–π—Ç–µ —Ä—è–¥–æ–º —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\nüìå –ù–∞–ø–∏—à–∏—Ç–µ –ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ')
cancel_all = '–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.'
mes_see = '–ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èüí¨, –∫—É–¥–∞ –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å.\n' \
          '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ - ' \
          '—Ç–∞–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"\n\n–†–∞–Ω–µ–µ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞:\n'

send_spam = '–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:\n'
spam_d = '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n'

# –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª–∏
options = '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—ç—Ç–∞–ø–Ω–æ :\n' \
          'üìå–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ - –î–û 40 –°–ò–ú–í–û–õ–û–í\n' \
          'üìå–ê–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü—Ä–∏–º–µ—Ä: –ú–∞—Ä–æ—Å–µ–π–∫–∞ 13—Å1\n' \
          'üìå–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–º–µ—Å—è—Ü, –¥–∞—Ç–∞, —á–∞—Å, –º–∏–Ω—É—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0) - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ü—Ä–∏–º–µ—Ä: 5, 25, 18, 30\n' \
          'üìå–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n' \
          'üìå–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é –°–¢–†–û–ì–û —á–µ—Ä–µ–∑ –ó–ê–ü–Ø–¢–£–Æ. –ü—Ä–∏–º–µ—Ä: 25 –º–∞—è, –Ω–∞—Å—Ç–æ–ª–∫–∏, –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã\n' \
          'üìå–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å (–¥–∞/–Ω–µ—Ç) - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç —Ñ—Ä–∞–π–¥–∞—Ç–∞?' \
          ' –ò –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä id –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ß–ï–†–ï–ó –ó–ê–ü–Ø–¢–£–Æ. –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞: –¥–∞, 95372442. –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ—Ç —Ñ—Ä–∞–π–¥–∞—Ç: –Ω–µ—Ç'

bgc_e_options = '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—ç—Ç–∞–ø–Ω–æ :\n' \
          'üìå–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ - –î–û 40 –°–ò–ú–í–û–õ–û–í\n' \
          'üìå–≠—Ç–æ—Ç –¥–µ–Ω—å - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –≤–µ—á–µ—Ä (–¥–∞/–Ω–µ—Ç)? –ü—Ä–∏–º–µ—Ä: –¥–∞\n' \
          'üìå–ê–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n' \
          'üìå–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–º–µ—Å—è—Ü, –¥–∞—Ç–∞ - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ó–ê–ü–Ø–¢–£–Æ). –ü—Ä–∏–º–µ—Ä: 5, 31'

            #–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 19:00; –î–æ 7-–º–∏ –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: 'https://tesera.ru/game/bohnanza/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60 –º–∏–Ω—É—Ç',
bgc_g_options = '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –Ω–∞ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—ç—Ç–∞–ø–Ω–æ :\n' \
          'üìå–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–µ—Ä–µ—á–Ω—è —Ç–µ–∫—É—â–∏—Ö –¥–Ω–µ–π-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞\n' \
          'üìå–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ - –î–û 20 –°–ò–ú–í–û–õ–û–í\n' \
          'üìå–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (—á–∞—Å, –º–∏–Ω—É—Ç—ã(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0) - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ó–ê–ü–Ø–¢–£–Æ). –ü—Ä–∏–º–µ—Ä: 19, 30\n' \
          'üìå–°—Å—ã–ª–∫—É –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –Ω–µ–π\n' \
          'üìå–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤(—á–∏—Å–ª–æ), —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏(—á–∏—Å–ª–æ-). –ü—Ä–∏–º–µ—Ä: 8, 60-120'

options_str = options.split('\n')
options_bgc_e_str = bgc_e_options.split('\n')
options_bgc_g_str = bgc_g_options.split('\n')
options_fail = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ'
options_almost = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
options_succ = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!'

destroy_succ = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–µ–ø–µ–ª–µ–Ω–æ!!!'
bgc_e_destroy_succ = '–î–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!'
bgc_g_destroy_succ = '–ò–≥—Ä–∞ –≤ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!'

bgc_spam_txt = '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥—É—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å:\n\n'
mes_a_che_tam = '–ù–æ—Ä–º–∞—Å\n–Ω–∞ –¥–≤–∏–∂-—Ç–æ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø–æ–π–¥–µ—à—å?'
welc = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞)\n–≠—Ç–æ –º–æ—è —Ä–∞–±–æ—Ç–∞üòÑ'

months = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è',
          7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è',  11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'}
daysweek = {'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '—Å—Ä–µ–¥–∞',
'Thursday': '—á–µ—Ç–≤–µ—Ä–≥','Friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'Saturday': '—Å—É–±–±–æ—Ç–∞', 'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}


e_dates = {"–ú–∞—Ñ–∏—è –Ω–∞ –∞–Ω–≥–ª. —è–∑—ã–∫–µ 7.06": dat(2019, 6, 7, 19, 30),
           'Cashflow 8.06 –≤ 15—á': dat(2019, 6, 8, 15),
           "–¢—É—Å–∞ –≤ –¢—É—Ä—Ü–∏–∏ 1-15 –∏—é–ª—è": dat(2019, 7, 1, 18)}

"""!!! –í—Å–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å bgc - —ç—Ç–æ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á—É–≤–∞–∫–æ–≤, —Ç–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è: 
–±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è > —ç—Ç–∏ —á—É–≤–∞–∫–∏ > –¥–Ω–∏ –∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π > —Å–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã) ..
–æ–±—ã—á–Ω–∞—è –∂–µ: –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è > –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ > –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è > –ø–æ–π–¥—É (—Ç—ã –∑–∞–ø–∏—Å–∞–ª—Å—è) / –æ—Ç–º–µ–Ω—è—é (–æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å)
"""
bgc_e_dates = {'–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –≤–µ—á–µ—Ä 29 –ú–∞—è': da(2019, 5, 29)
}

bgc_e = ['–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –≤–µ—á–µ—Ä 29 –ú–∞—è']
bgc_games = {bgc_e[0]: ['–ü–æ–º–æ—Ä—Å–∫–∞—è –ª–æ—Ü–∏—è', '–ö–∞–Ω–∞–≥–∞–≤–∞', 'Pandemic:Rising Tide',
                        '–ë–æ–Ω–∞–Ω–∑–∞', '–ö–æ—Å–º. –¥–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫–∏', '–í. –∑–∞–ø–∞–¥–Ω—ã–π –ø—É—Ç—å',
                        'Downfall of Pompeii', 'Dice Forge', 'Bang! Dice Game:TWD',
                        'Panic Station', "Chiyo's Secret", 'Res Arcana (adv.)',
                        '–¶–µ—Ä–±–µ—Ä', '–ö–æ—Ä. —Ö—Ä–æ–Ω–∏–∫–∏', '–ì—É–Ω–Ω—ã', '–°–µ–ª–µ—Å—Ç–∏—è —Å –¥–æ–ø–æ–º',
                        '–í–æ—Ä–æ–Ω—ã', '–ì–µ–º–±–ª–æ Q –∏ –ì–µ–º–±–ª–æ']
}
bgc_all_games = [j for i in bgc_games for j in bgc_games[i]]
bgc_g_dates = {
    bgc_e[0]:
           {
               bgc_games[bgc_e[0]][0]: ti(18, 15),
               bgc_games[bgc_e[0]][1]: ti(19, 1),
               bgc_games[bgc_e[0]][2]: ti(19, 2),
               bgc_games[bgc_e[0]][3]: ti(19, 3),
               bgc_games[bgc_e[0]][4]: ti(19, 4),
               bgc_games[bgc_e[0]][5]: ti(19, 5),
               bgc_games[bgc_e[0]][6]: ti(19, 6),
               bgc_games[bgc_e[0]][7]: ti(20),
               bgc_games[bgc_e[0]][8]: ti(21, 1),
               bgc_games[bgc_e[0]][9]: ti(21, 2),
               bgc_games[bgc_e[0]][10]: ti(21, 3),
               bgc_games[bgc_e[0]][11]: ti(21, 4),
               bgc_games[bgc_e[0]][12]: ti(22),
               bgc_games[bgc_e[0]][13]: ti(22),
               bgc_games[bgc_e[0]][14]: ti(22),
               bgc_games[bgc_e[0]][15]: ti(22),
               bgc_games[bgc_e[0]][16]: ti(22),
               bgc_games[bgc_e[0]][17]: ti(22)
           }
}

bgc = 'Board Game Club'
# –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–∞–ª—å—à–µ –∏–∑ –Ω–µ–≥–æ —Ñ–æ—Ä–º–∏—É—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–∏ –ø–æ –≤—Å—è–∫–∏–º –¥—Ä—É–≥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
e = ["–ú–∞—Ñ–∏—è –Ω–∞ –∞–Ω–≥–ª. —è–∑—ã–∫–µ 7.06", 'Cashflow 8.06 –≤ 15—á', "–¢—É—Å–∞ –≤ –¢—É—Ä—Ü–∏–∏ 1-15 –∏—é–ª—è"]
e_view = [bgc]
e_view.extend(e)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏—è —Å–∏–Ω–∏–º –∏–ª–∏ –∑–µ–ª–µ–Ω—ã–º - –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–∏—Å—Ç–æ –æ—Ç –Ω–∞—Å –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
e_who = {bgc: 1, e[0]: 1, e[1] : 1, e[len(e)-1]: 0}

e_adress = {e[0]: '—É–ª. –ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç 19—Å1',
            e[1]: ' –º. –ë–∞—É–º–∞–Ω—Å–∫–∞—è, —É–ª. –ù–∏–∂–Ω—è—è –ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è 35/52', e[len(e)-1]: '–¢—É—Ä—Ü–∏—è'}

bgc_places = ['–ø–∞–± Guns & Bears', 'Wooden Door', '–ö–¶ –ó–ò–õ', '–®–∞—Ö–º–∞—Ç–Ω—ã–π –∫–ª—É–± "–ë–µ–ª–∞—è –õ–∞–¥—å—è"']

bgc_adress = {bgc_places[0]: '–ù–æ–≤–æ—Å–ª–æ–±–æ–¥—Å–∫–∞—è —É–ª. 46–∫1',
              bgc_places[1]: '–ú–∏–ª—é—Ç–∏–Ω—Å–∫–∏–π –ø–µ—Ä., 6c1',
              bgc_places[2]: '–í–æ—Å—Ç–æ—á–Ω–∞—è —É–ª., 4c1',
              bgc_places[3]: '–ù–µ—Å–∫—É—á–Ω—ã–π —Å–∞–¥, –ø–æ –¥–æ—Ä–æ–≥–µ –º–∏–º–æ –¥–æ–º–æ–≤ 18, 20 –õ–µ–Ω–∏–Ω—Å–∫–æ–≥–æ –ø—Ä-—Ç–∞'}
			  
bgc_adress_d = {
    bgc_adress[bgc_places[0]]: '–û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–≥—Ä–æ–∫–æ–≤ - –≤ –≥–ª—É–±–∏–Ω–µ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫—Ä–∞—Å–Ω–æ–º –∑–∞–ª–µ + –ø–æ –ø–∞–±—É –∫—Ç–æ –≥–¥–µ.\n–ö–∞–∫ –ø—Ä–æ–π—Ç–∏: https://yandex.ru/maps/-/CCBOA0kE\n',
    bgc_adress[bgc_places[1]]: '–û–ø–ª–∞—Ç–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∞–Ω—Ç–∏–∫–∞—Ñ–µ - 2—Ä/–º–∏–Ω –∑–∞ –ø–µ—Ä–≤—ã–µ 2—á, –¥–∞–ª–µ–µ 1—Ä/–º–∏–Ω, —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–Ω—ã–µ, –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ –ø–∞—Å–ø–æ—Ä—Ç,' \
                   ' —Ç.–∫. –µ—Å—Ç—å –æ–ø—Ü–∏–∏ –≤–∑—è—Ç—å –∫–∞–ª—å—è–Ω, –ø–∏–≤–æ –∫ –±—É—Ä–≥–µ—Ä–∞–º –∏ –ø–∏—Ü—Ü–µ –∏ —Ç.–ø.\n–ö–∞–∫ –ø—Ä–æ–π—Ç–∏:https://yandex.ru/maps/-/CCvg46Zz\n',
    bgc_adress[bgc_places[2]]: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–∂–µ, –ª–∏–±–æ –º–µ–∂–¥—É —ç—Ç–∞–∂–∞–º–∏ –∑–∞ —Å—Ç–æ–ª–∏–∫–∞–º–∏\n–ö–∞–∫ –ø—Ä–æ–π—Ç–∏: https://yandex.ru/maps/-/CCBOAT4X\n',
    bgc_adress[bgc_places[3]]: '–ú–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –∏–∑ –ü–∞—Ä–∫–∞ –ì–æ—Ä—å–∫–æ–≥–æ (–≤–≤–µ—Ä—Ö –æ—Ç —Ç–µ–∞—Ç—Ä–∞ –°—Ç–∞—Å–∞ –ù–∞–º–∏–Ω–∞ –ø–æ —Ç—Ä–æ–ø–∏–Ω–∫–∞–º. –†—è–¥–æ–º —Å –•–ª–µ–±–æ–º –Ω–∞—Å—É—â–Ω—ã–º),' \
                    ' –ª–∏–±–æ —Å –õ–µ–Ω–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Å–ø–µ—Å–∫—Ç–∞, –¥–æ—Ä–æ–≥–∞ –º–µ–∂–¥—É –¥–æ–º–∞–º–∏ 18 –∏ 20\n–ö–∞–∫ –ø—Ä–æ–π—Ç–∏: https://yandex.ru/maps/-/CCBOEQKr\n',
}

bgc_e_adress = {
    bgc_adress[bgc_places[0]]: [bgc_e[0]],
    bgc_adress[bgc_places[1]]: [],
    bgc_adress[bgc_places[2]]: [],
    bgc_adress[bgc_places[3]]: []
}
# –ù–æ–º–µ—Ä–∞ id –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è
confirmed = {bgc: [], e[0]: [], e[1] : [], e[len(e)-1]: [293320616, 207863232]}

bgc_confirmed = {
    bgc_e[0]:
        {'–ü–æ–º–æ—Ä—Å–∫–∞—è –ª–æ—Ü–∏—è': ['–ò—Ä–∞', '–ê–Ω—Ç–æ–Ω'],
         '–ö–∞–Ω–∞–≥–∞–≤–∞': ['–î–µ–Ω–∏—Å', '–ê–ª–µ–∫—Å–µ–π', '–ê–Ω—Ç–æ–Ω'],
         'Pandemic:Rising Tide': ['–ë–æ—Ä–∏—Å', '–¥—Ä—É–≥ –ë–æ—Ä–∏—Å–∞', '–õ–µ–≤'],
         '–ë–æ–Ω–∞–Ω–∑–∞': ['–ê–Ω–¥—Ä–µ–π', '–ù–∏–∫–æ–ª–∞–π', '–ù–∞—Å—Ç–∏–∫', '–°—Ç–µ—Ñ–∞'],
         '–ö–æ—Å–º. –¥–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫–∏': ['–î–∞–Ω–∏–∏–ª', '–ê–ª–µ–∫—Å–µ–π', '–Ø–Ω'],
         '–í. –∑–∞–ø–∞–¥–Ω—ã–π –ø—É—Ç—å': ['–õ–∏–¥–∞', '–¢–∞–Ω—è', '–ë–æ—Ä—è'],
         'Downfall of Pompeii': ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä'],
         'Dice Forge': ['–ê–ª–µ–∫—Å–µ–π', '–ò—Ä–∞', '–ù–∏–∫–æ–ª–∞–π', '–ê–Ω—Ç–æ–Ω'],
         'Bang! Dice Game:TWD': ['–î–µ–Ω–∏—Å', '–ê–ª–µ–∫—Å–µ–π', '–ê–Ω—Ç–æ–Ω', '–ò—Ä–∞', '–ù–∏–∫–æ–ª–∞–π', '–ú–∞—Ä–∏–Ω–∞', '–Ø–Ω'],
         'Panic Station': [],
         "Chiyo's Secret": ['–ï–≤–≥–µ–Ω–∏–π', '–õ–µ–Ω–∞', '–ê–Ω–¥—Ä–µ–π', '–û–ª—è'],
         'Res Arcana (adv.)': [],
         '–¶–µ—Ä–±–µ—Ä': ['–î–∞–Ω–∏–∏–ª', '–ü–∞—à–∞', '–í–ª–∞–¥'],
         '–ö–æ—Ä. —Ö—Ä–æ–Ω–∏–∫–∏': [],
         '–ì—É–Ω–Ω—ã': [], '–°–µ–ª–µ—Å—Ç–∏—è —Å –¥–æ–ø–æ–º': [], '–í–æ—Ä–æ–Ω—ã': [], '–ì–µ–º–±–ª–æ Q –∏ –ì–µ–º–±–ª–æ': []}
    }

bgc_games_d = {
    bgc_e[0]: {
        bgc_games[bgc_e[0]][0]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 18:15; –î–æ 4-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                    'https://tesera.ru/game/pomorskaya-lotsiya\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 30-60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][1]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 19:00; –î–æ 4-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n–£—á–∏–º—Å—è —è–ø–æ–Ω—Å–∫–æ–π –∂–∏–≤–æ–ø–∏—Å–∏ ' \
                    '\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][2]: '–ò–≥—Ä–∞ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –¥–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫–∏. –ù–∞—á–∞–ª–æ –≤ 19:00; –î–æ 4-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                    'https://tesera.ru/game/pandemic-rising-tide/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 120 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][3]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 19:00; –î–æ 7-–º–∏ –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/bohnanza/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][4]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 19:00; –î–æ 4-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/6974\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 120-150 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][5]: '–ò–≥—Ä–∞ –í–µ–ª–∏–∫–∏–π –∑–∞–ø–∞–¥–Ω—ã–π –ø—É—Ç—å. –ù–∞—á–∞–ª–æ –≤ 19:40; –î–æ 3-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                '–ì–æ–Ω–∏ –∫–æ—Ä–æ–≤–∫—É –≤ —Å–≤–µ—Ç–ª–æ–µ –±—É–¥—É—â–µ–µ. ( –ë—É—Ä–≥–µ—Ä—ã –Ω–∞—à–µ –≤—Å–µ ) \n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 150-180 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][6]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 19:00; –î–æ 4-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/The-Downfall-of-Pompeii/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][7]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 19:00; –î–æ 4-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                    'https://tesera.ru/game/dice-forge/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][8]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 21:00; –î–æ 8-–º–∏ –∏–≥—Ä–æ–∫–æ–≤\n–ö—É–±–∏–∫–æ–≤—ã–π –ë—ç–Ω–≥ —Å —Ö–æ–¥—è—á–∏–º–∏ –º–µ—Ä—Ç–≤–µ—Ü–∞–º–∏, –ö–∞—Ä–ª!' \
                    '\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][9]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 21:00; –î–æ 6-—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                    'https://tesera.ru/game/panic-station/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60-90 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][10]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 21:00; –î–æ 8-–º–∏ –∏–≥—Ä–æ–∫–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/chiyos-secret/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 45-60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][11]: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ 21:00; –î–æ 3-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞' \
                                '\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 20-40 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][12]: '–ò–≥—Ä—ã –æ—Ç –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ "–≠–≤—Ä–∏–∫—É—Å". –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ 19:00; –î–æ 7-–º–∏ –∏–≥—Ä–æ–∫–æ–≤\n'
                  '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/Cerberus/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 40-90 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][13]: '–ò–≥—Ä–∞ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ —Ö—Ä–æ–Ω–∏–∫–∏.  –û—Ç –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ "–≠–≤—Ä–∏–∫—É—Å". –ù–∞—á–∞–ª–æ –ø–æ—Å–ª–µ 19:00; –î–æ 5-—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤\n'
                  '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/Paper-Tales/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][14]: '–ò–≥—Ä—ã –æ—Ç –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ "–≠–≤—Ä–∏–∫—É—Å". –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ 19:00; –î–æ 4-–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n'
                  '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/huns/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60-120 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][15]: '–ò–≥—Ä—ã –æ—Ç –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ "–≠–≤—Ä–∏–∫—É—Å". –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ 19:00; –î–æ 6-—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤\n'
                  '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/celestia/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 60 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][16]: '–ò–≥—Ä—ã –æ—Ç –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ "–≠–≤—Ä–∏–∫—É—Å". –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ 19:00; –î–æ 2-—É—Ö –∏–≥—Ä–æ–∫–æ–≤\n'
                  '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/Odins-Ravens-2ed/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 30 –º–∏–Ω—É—Ç',
        bgc_games[bgc_e[0]][17]: '–ò–≥—Ä—ã –æ—Ç –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ "–≠–≤—Ä–∏–∫—É—Å". –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ 19:00; –î–æ 6-—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤\n'
                  '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ' \
                                'https://tesera.ru/game/gemblo/\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ 30 –º–∏–Ω—É—Ç',
    }
}

bgc_offic = {bgc_e[0] : 'negative'}

events_d = {
e[0] : ('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Å–µ–ª–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è, –∞ —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, welcome to Mafia in English!\n' 
'–ñ–¥–µ–º –≤–∞—Å –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ –∞–Ω—Ç–∏–∫–∞—Ñ–µ –¶–∏—Ñ–µ—Ä–±–ª–∞—Ç!\n\n'
'–û–ø–ª–∞—Ç–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É –∞–Ω—Ç–∏–∫–∞—Ñ–µ (–ø–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ - 3—Ä –º–∏–Ω—É—Ç–∞, –¥–∞–ª—å—à–µ 2—Ä, —Å—Ç–æ–ø-—á–µ–∫ - 600—Ä)\n'
'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'),
e[1] : ('–ò–≥—Ä–∞ "–î–µ–Ω–µ–∂–Ω—ã–π –ü–æ—Ç–æ–∫" - —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞–Ω–∏—è–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.'
'–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º —è–ø–æ–Ω—Å–∫–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –†–æ–±–µ—Ä—Ç–æ–º –ö–∏–π–æ—Å–∞–∫–∏.\n\n'
'–ü–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú –ò–ì–†–´ –£–ß–ê–°–¢–ù–ò–ö –£–ó–ù–ê–ï–¢:\n'
'- –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞?\n'
'- —á—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?\n'
'- –∫—É–¥–∞ –º–æ–∂–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏?\n'
'- –∫–∞–∫ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—é—Ç—Å—è –¥–µ–Ω—å–≥–∞–º–∏ –±–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏?\n'
'- –∫–∞–∫–∏–µ —É –í–∞—Å ¬´–æ—Ç–Ω–æ—à–µ–Ω–∏—è¬ª —Å –¥–µ–Ω—å–≥–∞–º–∏?\n'
'- –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥, –¥–∞–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—è?\n'
'- –∫–∞–∫ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ –∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞?\n'
'- –∫–∞–∫ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –°–µ–±—è?\n'
'–ü–æ–º–∏–º–æ –∏–≥—Ä—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑–±–æ—Ä –≤–∞—à–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –ø—Ä–∏—è—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.\n'
'–°–±–æ—Ä 150 —Ä—É–±–ª–µ–π.'),
bgc : ('–ú—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º Board Game Community –≤ –ú–æ—Å–∫–≤–µ –∏ –ø—Ä–æ–≤–æ–¥–∏–º –∏–≥—Ä–æ–≤—ã–µ –≤–µ—á–µ—Ä–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö —Å—Ç–æ–ª–∏—Ü—ã.\n\n'
'–ù–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–¥–æ–π–¥—É—Ç –í–∞–º –∏–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –í—ã:\n\n'
'‚ñ∫ –õ—é–±–∏—Ç–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —ç—Ç–∏–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –º–∏—Ä–æ–º\n'
'‚ñ∫ –ò—â–µ—Ç–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤, —è—Ä–∫–∏—Ö —ç–º–æ—Ü–∏–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ—á–µ—Ä –≤ –ø—Ä–∏—è—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏\n'
'‚ñ∫ –¶–µ–Ω–∏—Ç–µ –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä–∞—Ö –Ω–µ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é, –Ω–æ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é\n'
'‚ñ∫ –•–æ—Ç–∏—Ç–µ —É–≤–ª–µ—á—å —Å–≤–æ–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö, –¥—Ä—É–∑–µ–π –∏ –±–ª–∏–∑–∫–∏—Ö —ç—Ç–∏–º –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–º —Ö–æ–±–±–∏\n'
'–í—Ö–æ–¥ –∏ —É—á–∞—Å—Ç–∏–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n'
'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –¥—Ä—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É!\n\n'),
e[len(e)-1]: ("–õ–µ—Ç–æ–º, —Å 1 –ø–æ 15 –∏—é–ª—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è Sea || Summer || Students - –±–æ–ª—å—à–∞—è –ª–µ—Ç–Ω—è—è —Ç—É—Å–æ–≤–∫–∞ –Ω–∞ –º–æ—Ä–µ –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏.\n"
"–ë–æ–ª–µ–µ 100 —á–µ–ª–æ–≤–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ —é–∂–Ω—ã–π –±–µ—Ä–µ–≥ –¢—É—Ä—Ü–∏–∏. –£–∂–µ –≤—Ç–æ—Ä–æ–π –ø–æ —Å—á–µ—Ç—É –≤—ã–µ–∑–¥ —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –º–∞—Å—à—Ç–∞–±–Ω–µ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!\n"
"–ë–∞—Ä—ã, –¥–∏—Å–∫–æ—Ç–µ–∫–∏, —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏ –∫–≤–µ—Å—Ç—ã - –Ω–∞–º –±—É–¥–µ—Ç —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è! "
"–ê —Ç–µ–ø–ª–æ–µ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–µ –º–æ—Ä–µ —Å–æ–∑–¥–∞—Å—Ç –ª—É—á—à—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –º–æ–ª–æ–¥–µ–∂–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞)")
}


# Words for reading from keyboard - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥–∏—à—å –≤ –ª—é–±–æ–º —à–∞–≥–µ, –∏ –ø–µ—Ä–µ–π–¥–µ—à—å –≤ —à–∞–≥ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
e_anss = {
e[0] : ['–º–∞—Ñ–∏—è'],
e[1] : ['–¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫', 'cashflow'],
bgc: [],
e[len(e)-1]: ['01.07', '15.07', '01.07-15.07', '1-15 –∏—é–ª—è', '1.7', '1 –∏—é–ª—è', '–∏—é–ª—å',
               "—Ç—É—Å–∞ –Ω–∞ –º–æ—Ä–µ", "–º–æ—Ä–µ", "—Ç—É—Ä—Ü–∏—è"]
}
bgc_anss = {}
bgc_anss_all = []

def make_date(month, date, hour, min = 0):
    return dat(2019, month, date, hour, min)


def e_anss_all_f():
    lst = []
    for i in e_anss:
        if i != bgc:
            lst.extend(e_anss[i])
    return lst
e_anss_all = e_anss_all_f()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤—ã–∑–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –≤–≤–æ–¥—É —á–∏—Å–ª–∞
def e_a_numb(m):
    return [f'{m}', f'{m}.', f'{m}-–æ–µ']

e_anss_numb_e = []
for n in range(len(e)):
    e_anss_numb_e.extend(e_a_numb(n+1))

bgc_e_numbs = []
bgc_g_numbs = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫-–Ω–æ–º–µ—Ä–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
def e_anss_del(e_anss_f):
    if e_anss[bgc] != []:
        e_anss[bgc] = []
    if args_ind[event.user_id]['pp']:
        for k in range(1, len(registr)+1):
            for u in e_anss_f:
                for j in e_a_numb(k + 1):
                    if j in e_anss_f[u]:
                        e_anss_f[u].remove(j)
    else:
        for n, o in enumerate(e_view):
            for j in e_a_numb(n + 1):
                if j in e_anss_f[o]:
                    e_anss_f[o].remove(j)
    return e_anss_f


ok = r'(–∑–∞–ø–∏—Å–∞—Ç—å—Å—è)|(—Ö[–æ—á—É–∞—Ç—é]{3})|(–¥[–∞–æ]–≤–∞–π)|(–ø[–∞–æ]–π[–¥—É–µ—ë–º—Ç–∏])|(–ø[–∞–æ]?—à–ª–∏)|(–¥–∞+)|((–≥–æ)+—É*)|(–∏–¥[—ë–µ–º–¥—É])|(–∫[–∞–æ]–Ω–µ[—á—à]–Ω[–∞–æ]*)|(–æ–∫[–µ–π–∏]*)'
nearest = r'(–±–ª–∏–∑?–∂–∞–π—à[–∏–µ]–µ!*)|([–ø–æ—Å–ª–µ]*–∑–∞–≤—Ç—Ä[–∞–æ])|([–≤ ]*–≤—ã—Ö–æ–¥–Ω[—ã–µ–æ–π]*)'
to_menu = r'(–º–µ–Ω—é)|([–≤—Å]* ?–Ω–∞—á[–Ω–∏–∞–ª–æ–∞—Ç—å]*)|(–Ω–∞–∑–∞–¥)|(–∑–∞–Ω–æ–≤[–∞–æ])'
begin = r'(\b—Å—Ç–∞—Ä—Ç[—É–π]*\b)|(–ø—Ä–∏–≤[–µ—Ç—Å—Ç–≤—É—é]*)|(\b–¥–æ–±—Ä[–æ–≥–æ—ã–π–µ]+ ?[—É—Ç—Ä–æ–∞–æ–¥–Ω—è–¥–µ–Ω—å–≤–µ—á–µ—Ä–∞]*\b)|([–∑–¥–∞–æ]+—Ä[–∞–æ–≤–∞—Å—Ç–≤—É–π—Ç–µ]+)|(\b—Ö–∞–π\b)|(hi)|(hello)|(\b–∫—É[–∫—É]*\b)|(sta*rt)'
a_che_tam = r'([–∞ ]*—á[–µ—ë–æ]{1} —Ç–∞–º\??)|(–∫–∞–∫ [—Ç—ã–¥–µ–ª–∞]\??)'
welcom = r'(—Å?–ø–∞—Å[–∏–µ]–±[–∞–æ]*)|(–±–ª–∞–≥–æ–¥–∞—Ä—é?[—Å—Ç–≤—É—é]*[–∏–º]*)|(–Ω–æ?—Ä–º[–∞—Å]*)|(–∫ ?—Ä ?–∞ ?—Å ?[–∏–∞]? ?–≤ ?[–∞–æ]?[—á–∏–∫]*)'


# Supporting functions

# –î–ª—è –∫–Ω–æ–ø–∫–∏
def butt(dct, size, c, color, label1, label2 = None, color2 = None, label3 = None, color3 = None):
    if size == 1:
        if label1 in bgc_e:
            color = bgc_offic[label1]
        if label1 == e[len(e)-1]:
            color = 'default'
        if label1 in e_view and label1 in e_who:
            #print('e_who', e_who)   print('label1: ', label1)
            if e_who[label1] == 1:
                color = 'primary'
        dct['buttons'].append([{
            "action": {
            "type": "text",
            "payload": '{"button": "%d"}' % (c),
            "label": label1
            },
            "color": color
        }])
    elif size == 2:
        dct['buttons'].append([{
            "action": {
            "type": "text",
            "payload": '{"button": "%d"}' % c,
            "label": label1},
            "color": color},
            {"action": {
            "type": "text",
            "payload": '{"button": "%d"}' % (c + 1),
            "label": label2},
            "color": color2
            }])
    elif size == 3:
        dct['buttons'].append([{
            "action": {
            "type": "text",
            "payload": '{"button": "%d"}' % c,
            "label": label1},
            "color": color},
            {"action": {
            "type": "text",
            "payload": '{"button": "%d"}' % (c + 1),
            "label": label2},
            "color": color2},
            {"action": {
            "type": "text",
            "payload": '{"button": "%d"}' % (c + 2),
            "label": label3},
            "color": color3
            }])
    return dct

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞–≤—ã
def keyb1(lst=None, y=1, conf=None, id=None, regist=None):
    keyb = {"one_time": None, "buttons": []}
    c=1
    seen = False
    if regist:
        for i in regist:
            butt(keyb, 1, c, "positive", i)
        butt(keyb, 1, c, "primary", to_begin)
    else:
        if lst:
            if len(lst) < 7:
                for i in lst:
                    butt(keyb, 1, c, "positive", str(i))
            else:
                z = 0
                while z <= len(lst)-1:
                    z2 = z+1
                    if z2 == len(lst):
                        butt(keyb, 1, c, "positive", str(lst[z]))
                        break
                    else:
                        butt(keyb, 2, c, "positive", str(lst[z]), str(lst[z2]), "positive")
                        z = z2
                        z+=1
        if id == None and conf == None and y != 0:
            butt(keyb, 1, c, "primary", to_begin)

        elif id != None and conf != None:
            for i in conf:
                if id in conf[i]:
                    if y == 0:
                        butt(keyb, 1, c, "primary", see_my_e)
                    else:
                        butt(keyb, 2, c, "primary", to_begin, see_my_e, "positive")
                        if y == 2:
                            butt(keyb, 1, c, "default", cancel1)
                    seen = True

                    break
            if seen == False and y != 0:
                butt(keyb, 1, c, "primary", to_begin)

    if args_ind[event.user_id]['deep'] < 5:
        if id in admins:
            butt(keyb, 2, c, "negative", show_all, spam, "default")
        elif id in orgs:
            butt(keyb, 1, c, "negative", show_org)


    return keyb

def m_send(user, message, keyboard = None):
    return vk.messages.send(user_id = user, message = message, keyboard = keyboard, random_id = get_random_id())

# Main with data
#pr = 158049316 ; f = 173884811 #291093703 43132896 291093703, 448434073
group_i = '158049316'
token_profit_m = ''
admins2 = [291093703, 208877115, 448434073]
admins = [95372442, 43132896, 293320616]
orgs = {448434073: bgc, 9310639: e[1]}
vk_session = vk_api.VkApi(token=token_profit_m)
longpoll = VkLongPoll(vk_session)
vk = vk_session.get_api()

members =[]
# –°–ø–∏—Å–æ–∫ –∫–æ–º—É –æ—Ç—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
members_spam = []
# –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (—á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ,  –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è —Å –Ω—É–ª—è —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
how_much_growth = 15
# Supporting arguments for order of actions of bot

# –§—É–Ω–∫—Ü–∏—è, –æ—á–∏—â–∞—é—â–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ
def clear_go_e():
    go_e = []
    for i in e:
        go_e.append(False)
    return go_e

go_e = clear_go_e()

# –£ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤–æ—è –≥–ª—É–±–∏–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —à–∞–≥ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–≥–∏—Ö —à—Ç—É–∫
def args_ind_add(argss_ind, ind_id, pp, deep, numb, bgc_e_cur, bgc_g_cur, can_beg=None, key_spam = 0):
    argss_ind[ind_id] = {'pp': pp, 'deep': deep, 'numb': numb,
                         'bgc_e_current': bgc_e_cur, 'bgc_g_current': bgc_g_cur, 'can_begin': to_menu, 'for_spam': key_spam}
    return argss_ind

def args_ind_add_can_begin(argss_ind, beg = ''):
    if beg != '':
        patt = to_menu + '|' + beg
    else:
        patt = to_menu
    argss_ind[event.user_id]['can_begin'] = patt
    return  argss_ind

# Helpings args
# –ü–∞—Ä–æ–ª–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–Ω–∞—à–∏—Ö)
password = '–ø—Ä–∞–æ—Ç—Ü—ã'
pass_del = '–∫–∞—Ä–∞'
# –ü–∞—Ä–æ–ª–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (bgc) - –¥–µ–Ω—å, –∏–≥—Ä–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
pass_e_bgc = '–¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å'
pass_g_bgc = '–¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É'
p_del_e_bgc = '—É–±—Ä–∞—Ç—å –¥–µ–Ω—å'
p_del_g_bgc = '—É–±—Ä–∞—Ç—å –∏–≥—Ä—É'
bgc_e_determ = 0
bgc_g_determ = 0
determinate = 0
args_ind = {}
previous = ''
check_text_spam = 0
bgc_4_spam = 0
arg_for_opt = {i:0 for i in admins}
arg_bgc_for_opt = {i:0 for i in orgs}
"""–ì–ª—É–±–∏–Ω–∞ deep : 0 - –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ; 1 - —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂. –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π; 2 - –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç –Ω–∞—Å; 
3 - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞–º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π, –∫—É–¥–∞ —á–µ–ª–æ–≤–µ–∫ –∑–∞–ø–∏—Å–∞–ª—Å—è; 4 - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏  –Ω–∞ –Ω–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
5 - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π; 6 - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π; 7 - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
            current = event.text
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            if event.user_id not in args_ind:
                args_ind = args_ind_add(args_ind, event.user_id, 0, 0, 0, '', '')
                if event.user_id not in members_spam:
                    members_spam.append(event.user_id)
            #print(current, 'begin: ', args_ind[event.user_id]['deep'], ';;;', arg_for_opt[event.user_id])

            # –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –æ–±–Ω—É–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if current == to_begin or (args_ind[event.user_id]['deep'] not in (0, 1) and (event.user_id not in admins and event.user_id not in orgs) and\
                    (re.match(args_ind[event.user_id]['can_begin'], current.lower()) or '–æ—Ç–º–µ–Ω' in current.lower())):
                # –ü—Ä–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –æ–±–Ω—É–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–π –≤—ã–±–æ—Ä –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                go_e = clear_go_e()
                e_anss = e_anss_del(e_anss)
                e_anss_all = e_anss_all_f()
                args_ind[event.user_id]['deep'] = 0
                args_ind = args_ind_add_can_begin(args_ind, beg='')
                determinate = 0
                check_text_spam = 0
                if event.user_id in arg_for_opt:
                    arg_for_opt[event.user_id] = 0
                if event.user_id in arg_bgc_for_opt:
                    arg_bgc_for_opt[event.user_id] = 0
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
            if previous.lower() == spam.lower() and (current in e or current in bgc_e):
                m_send(event.user_id, spam_d)
                check_text_spam = 1

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∏–≥—Ä—ã –¥–ª—è bgc (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω.)
            elif arg_bgc_for_opt.get(event.user_id):

                if arg_bgc_for_opt[event.user_id] >= 1:
                    text = ''
                    if 1 <= arg_bgc_for_opt[event.user_id] <= 5:
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        if arg_bgc_for_opt[event.user_id] == 1:
                            if len(current) <= 40 and current != bgc_button_opt[0]:
                                new_bgc_e.append(current)
                                arg_bgc_for_opt[event.user_id] = 2
                                text = options_bgc_e_str[2]
                                m_send(event.user_id, text, json.dumps(keyb1(['–¥–∞', '–Ω–µ—Ç'], 1), ensure_ascii=False))
                            else:
                                m_send(event.user_id, options_fail)
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –≤–µ—á–µ—Ä –∏–ª–∏ –Ω–µ—Ç
                        elif arg_bgc_for_opt[event.user_id] == 2:
                            if current.lower() in ('–¥–∞', '–Ω–µ—Ç'):
                                offic = current.lower()
                                arg_bgc_for_opt[event.user_id] = 3
                                text = options_bgc_e_str[3]
                                m_send(event.user_id, text, json.dumps(keyb1(bgc_places, 1), ensure_ascii=False))
                            else:
                                m_send(event.user_id, options_fail)
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        elif arg_bgc_for_opt[event.user_id] == 3 and current.lower() not in ('–¥–∞', '–Ω–µ—Ç'):
                            some = current
                            if 'amp;' in current:
                                some = re.sub(r'amp;', '', current)
                            new_bgc_e.append(some)
                            arg_bgc_for_opt[event.user_id] = 4
                            text = options_bgc_e_str[4]
                            m_send(event.user_id, text, json.dumps(keyb1(), ensure_ascii=False))
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        elif arg_bgc_for_opt[event.user_id] == 4:
                            t1 = current.split(',')
                            check = 1
                            if len(t1) == 2:
                                if not 0 < int(t1[0]) < 13 and check == 1:
                                    m_send(event.user_id, options_fail)
                                    check = 0
                                if not 0 < int(t1[1]) < 32 and check == 1:
									m_send(event.user_id, options_fail)
									check = 0
                                if check == 1:
                                    arg_bgc_for_opt[event.user_id] = 5
                                    m_send(event.user_id, options_almost,
                                           json.dumps(keyb1(bgc_button_opt[1:2], 1), ensure_ascii=False))
                                elif check == 0:
                                    m_send(event.user_id, options_fail)
                            else:
                                m_send(event.user_id, options_fail)
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        elif arg_bgc_for_opt[event.user_id] == 5 and current == bgc_button_opt[1]:
                            if offic == '–¥–∞':
                                bgc_offic[new_bgc_e[0]] = 'negative'
                            elif offic == '–Ω–µ—Ç':
                                bgc_offic[new_bgc_e[0]] = 'positive'
                            e1_da_curr = da(2019, int(t1[0]), int(t1[1]))
                            for i in bgc_e:
                                if e1_da_curr < bgc_e_dates[i]:
                                    k = bgc_e.index(i)
                                    bgc_e.insert(k, new_bgc_e[0])
                                    break
                            spec = ''
                            bgc_e_dates[bgc_e[k]] = e1_da_curr
                            bgc_g_dates[bgc_e[k]] = {}
                            for n, i in enumerate(new_bgc_e):
                                spec += f'{n}: {i}\n'
                            for i in t1:
                                spec += f'{i}'
                            bgc_games[new_bgc_e[0]] = []
                            bgc_games_d[new_bgc_e[0]] = {}
                            m_send(95372442, spec)
                            bgc_e_adress[bgc_adress[new_bgc_e[1]]] = new_bgc_e[0]
                            # text = f'{e[k]}\n{int(t[1])} {months[int(t[0])]}, {daysweek[e_dates[e[k]].strftime("%A")]},'f' –≤ {e_dates[e[k]].strftime("%H:%M")}\n –ø–æ –∞–¥—Ä–µ—Å—É: {e_adress[e[k]]}\n\n{new_e[2]}'
                            arg_bgc_for_opt[event.user_id] = 0
                            new_bgc_e = []
                            m_send(event.user_id, options_succ,
                                   json.dumps(keyb1(None, 1, confirmed, event.user_id), ensure_ascii=False))

                    elif 6 <= arg_bgc_for_opt[event.user_id] <= 11:
                        if arg_bgc_for_opt[event.user_id] == 6 and current != bgc_button_opt[3] and current in bgc_e:
                            new_bgc_e.append(current)
                            arg_bgc_for_opt[event.user_id] = 7
                            text = options_bgc_g_str[2]
                            m_send(event.user_id, text, json.dumps(keyb1(), ensure_ascii=False))
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        elif arg_bgc_for_opt[event.user_id] == 7:
                            if len(current) <= 20:
                                new_bgc_e.append(current)
                                arg_bgc_for_opt[event.user_id] = 8
                                text = options_bgc_g_str[3]
                                m_send(event.user_id, text)
                            else:
                                m_send(event.user_id, options_fail)
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        elif arg_bgc_for_opt[event.user_id] == 8:
                            t2 = current.split(',')
                            check = 1
                            if len(t2) in (1, 2):
                                if not -1 < int(t2[0]) < 24 and check == 1:
                                    m_send(event.user_id, options_fail)
                                    check = 0
                                if len(t2) == 2:
                                    if not -1 < int(t2[1]) < 60 and check == 1:
                                        m_send(event.user_id, options_fail)
                                        check = 0
                                if check == 1:
                                    text = options_bgc_g_str[4]
                                    arg_bgc_for_opt[event.user_id] = 9
                                    m_send(event.user_id, text)
                                elif check == 0:
                                    m_send(event.user_id, options_fail)
                            else:
                                m_send(event.user_id, options_fail)
                            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        elif arg_bgc_for_opt[event.user_id] == 9:
                            if '&quot;' in current:
                                txt = re.sub(r'&quot;', '"', current)
                            else:
                                txt = current
                            new_bgc_e.append(txt)
                            text = options_bgc_g_str[5]
                            arg_bgc_for_opt[event.user_id] = 10
                            m_send(event.user_id, text)
                        elif arg_bgc_for_opt[event.user_id] == 10:
                            zzz = current.split(',')
                            check = 1
                            if len(zzz) == 2:
                                h1 = re.sub(' ', '', zzz[0])
                                h2 = re.sub(' ', '', zzz[1])
                                if not re.match(r'\d+', h1):
                                    m_send(event.user_id, options_fail)
                                    check = 0
                                if not re.match(r'\d\d', h2) and check == 1:
                                    m_send(event.user_id, options_fail)
                                    check = 0
                                if check == 1:
                                    arg_bgc_for_opt[event.user_id] = 11
                                    new_bgc_e.append([h1, h2])
                                    m_send(event.user_id, options_almost,
                                           json.dumps(keyb1(bgc_button_opt[3:], 1), ensure_ascii=False))
                                elif check == 0:
                                    m_send(event.user_id, options_fail)
                            else:
                                m_send(event.user_id, options_fail)
                                #dat.combine(bgc_e_dates[i], bgc_g_dates[i][j])
                        elif arg_bgc_for_opt[event.user_id] == 11:
                            e_curr = new_bgc_e[0]
                            g_curr = new_bgc_e[1]
                            if len(t2) == 2:
                                g_curr_date = ti(int(t2[0]), int(t2[1]))
                            elif len(t2) == 1:
                                g_curr_date = ti(int(t2[0]))
                            if bgc_g_dates[e_curr]:
                                for n, i in enumerate(bgc_g_dates[e_curr]):
                                    if g_curr_date <= bgc_g_dates[e_curr][i]:
                                        k = bgc_games[e_curr].index(i)
                                        bgc_games[e_curr].insert(k, g_curr)
                                        break
                                    elif n == len(bgc_g_dates[e_curr])-1:
                                        bgc_games[e_curr].append(g_curr)
                            else:
                                bgc_games[e_curr].append(g_curr)
                            bgc_g_dates[e_curr][g_curr] = g_curr_date
                            bgc_all_games.append(g_curr)
                            if e_curr not in bgc_confirmed:
                                bgc_confirmed[e_curr] = {}
                            bgc_confirmed[e_curr].update({g_curr: []})
                            g_d = f'–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ {g_curr_date.strftime("%H:%M")}; –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {new_bgc_e[3][0]}\n' \
                                f'–û–ø–∏—Å–∞–Ω–∏–µ, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫ –∏–≥—Ä–µ: {new_bgc_e[2]}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏: {new_bgc_e[3][1]} –º–∏–Ω—É—Ç'
                            spec = ''
                            for n, i in enumerate(new_bgc_e):
                                spec += f'{n}: {i}\n'
                            for i in t2:
                                spec += f'{i}'
                            m_send(95372442, spec)
                            bgc_games_d[e_curr][g_curr] = g_d
                            m_send(event.user_id, options_succ,
                                   json.dumps(keyb1(None, 1, confirmed, event.user_id), ensure_ascii=False))
                            txt = ''
                            new_bgc_e = []
                            arg_bgc_for_opt[event.user_id] = 0
            # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –∏–≥—Ä—ã –¥–ª—è bgc (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω.)
            elif bgc_g_determ == 2 and previous in bgc_e and event.user_id in admins2:
                g_cur = current
                bgc_g_dates[e_cur].pop(g_cur)
                bgc_games_d[e_cur].pop(g_cur)
                bgc_confirmed[e_cur].pop(g_cur)
                bgc_all_games.pop(bgc_all_games.index(g_cur))
                bgc_games[e_cur].pop(bgc_games[e_cur].index(g_cur))
                bgc_g_determ = 0
                e_cur = ''
                g_cur = ''
                m_send(event.user_id, bgc_g_destroy_succ, json.dumps(keyb1(None, 1, confirmed, event.user_id), ensure_ascii=False))
            # –®–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏–≥—Ä—ã, –≥–¥–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –¥–ª—è bgc (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω.)
            elif bgc_g_determ == 1 and previous.lower() == p_del_g_bgc and current.lower() != p_del_g_bgc and event.user_id in admins2:
                e_cur = current
                text = ''
                if bgc_games[e_cur]:
                    for k, i in enumerate(bgc_games[e_cur]):
                        text += f"{k+1}. {i}\n"
                    m_send(event.user_id, text, json.dumps(keyb1(bgc_games[e_cur], 1, confirmed, event.user_id),
                                                           ensure_ascii=False))
                    bgc_g_determ = 2
                else:
                    text += '–ò–≥—Ä –Ω–∞ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    m_send(event.user_id, text, json.dumps(keyb1(), ensure_ascii=False))
                    bgc_g_determ = 0
                text = ''

            elif bgc_e_determ == 1 and previous.lower() == p_del_e_bgc and current.lower() != p_del_e_bgc and event.user_id in admins2:
                e_cur = current

                for i in bgc_e_adress:
                    if e_cur in bgc_e_adress[i]:
                        bgc_e_adress[i].pop(bgc_e_adress[i].index(e_cur))
                bgc_e_dates.pop(e_cur)
                bgc_g_dates.pop(e_cur)
                bgc_games_d.pop(e_cur)
                bgc_offic.pop(e_cur)
                bgc_confirmed.pop(e_cur)
                for i in bgc_games:
                    if i in bgc_all_games:
                        bgc_all_games.pop(bgc_all_games.index(i))
                bgc_games.pop(e_cur)
                bgc_e.pop(bgc_e.index(e_cur))
                bgc_e_determ = 0
                e_cur = ''
                m_send(event.user_id, bgc_e_destroy_succ, json.dumps(keyb1(None, 1, confirmed, event.user_id), ensure_ascii=False))

            elif current.lower() == p_del_e_bgc and event.user_id in admins2:
                text = ''
                for k, i in enumerate(bgc_e):
                    text += f"{k+1}. {i}\n"
                m_send(event.user_id, text, json.dumps(keyb1(bgc_e, 1, confirmed, event.user_id),
                                                       ensure_ascii=False))
                bgc_e_determ = 1
                text = ''
            elif current.lower() == p_del_g_bgc and event.user_id in admins2:
                text = '–í—ã–±–µ—Ä–µ—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —É–¥–∞–ª—è–µ–º–∞—è –∏–≥—Ä–∞.\n'
                for k, i in enumerate(bgc_e):
                    text += f"{k+1}. {i}\n"
                m_send(event.user_id, text, json.dumps(keyb1(bgc_e, 1, confirmed, event.user_id),
                                                       ensure_ascii=False))
                bgc_g_determ = 1
                text = ''
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è bgc —á–µ—Ä–µ–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            elif current.lower() == pass_e_bgc and event.user_id in admins2:
                m_send(event.user_id, bgc_e_options, json.dumps(keyb1(bgc_button_opt[:1], 1), ensure_ascii=False))
            elif current.lower() == pass_g_bgc and event.user_id in admins2:
                m_send(event.user_id, bgc_g_options, json.dumps(keyb1(bgc_button_opt[2:3], 1), ensure_ascii=False))
            elif current == bgc_button_opt[0] and event.user_id in admins2:
                text = ''
                text = options_bgc_e_str[1]
                m_send(event.user_id, text, json.dumps(keyb1(), ensure_ascii=False))
                arg_bgc_for_opt[event.user_id] = 1
                new_bgc_e = []
            elif current == bgc_button_opt[2] and event.user_id in admins2:
                m_send(event.user_id, options_bgc_g_str[1], json.dumps(keyb1(bgc_e, 1), ensure_ascii=False))
                arg_bgc_for_opt[event.user_id] = 6
                new_bgc_e = []



            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ—Ä–µ–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            elif current.lower() == password and event.user_id in admins:
                m_send(event.user_id, options, json.dumps(keyb1(button_opt[:1], 1), ensure_ascii=False))
            # –£–¥–∞–ª–µ–Ω–∏–µ
            elif determinate == 1 and '–∑–∞–ø–∏—Å–∏' not in current.lower() and previous.lower() == pass_del and\
                    current.lower() != pass_del and event.user_id in admins:
                e_dates.pop(current)
                e_adress.pop(current)
                events_d.pop(current)
                for i in e_anss:
                    if i == current:
                        e_anss.pop(i)
                        break
                e_anss_all = e_anss_all_f()
                e_who.pop(current)
                for k, v in orgs.items():
                    if v == current:
                        orgs.pop(k)
                        break
                confirmed.pop(current)
                e_view.pop(e.index(current)+1)
                e.pop(e.index(current))
                determinate = 0
                m_send(event.user_id, destroy_succ)
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            elif arg_for_opt.get(event.user_id):
                if arg_for_opt[event.user_id] >= 1:

                    text = ''
                    if arg_for_opt[event.user_id] == 1:
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        if len(current) <= 40 and current != button_opt[0]:
                            new_e.append(current)
                            arg_for_opt[event.user_id] = 2
                            text = options_str[2]
                            m_send(event.user_id, text)
                        else:
                            m_send(event.user_id, options_fail)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    elif arg_for_opt[event.user_id] == 2:
                        new_e.append(current)
                        arg_for_opt[event.user_id] = 3
                        text = options_str[3]
                        m_send(event.user_id, text)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    elif arg_for_opt[event.user_id] == 3:
                        t = current.split(',')
                        check = 1
                        if len(t) in (3, 4):
                            if not 0 < int(t[0]) < 13 and check == 1:
                                m_send(event.user_id, options_fail)
                                check = 0
                            if not 0 < int(t[1]) < 32 and check == 1:
                                m_send(event.user_id, options_fail)
                                check = 0
                            if not -1 < int(t[2]) < 24 and check == 1:
                                m_send(event.user_id, options_fail)
                                check = 0
                            if len(t) == 4:
                                if not -1 < int(t[3]) < 60 and check == 1:
                                    m_send(event.user_id, options_fail)
                                    check = 0
                            if check == 1:
                                text = options_str[4]
                                arg_for_opt[event.user_id] = 4
                                m_send(event.user_id, text)
                        else: m_send(event.user_id, options_fail)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    elif arg_for_opt[event.user_id] == 4:
                        if '&quot;' in current:
                            txt = re.sub(r'&quot;', '"', current)
                        else:
                            txt = current
                        new_e.append(txt)
                        text = options_str[5]
                        arg_for_opt[event.user_id] = 5
                        m_send(event.user_id, text)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    elif arg_for_opt[event.user_id] == 5:
                        new_e.append(current.split(','))
                        text = options_str[6]
                        arg_for_opt[event.user_id] = 6
                        m_send(event.user_id, text)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ –æ—Ç –§—Ä–∞–π–¥–∞—Ç
                    elif arg_for_opt[event.user_id] == 6:
                        o = []
                        o.extend(current.split(','))
                        if '–Ω' in o[0].lower():
                            new_e.append('–Ω–µ—Ç')
                            arg_for_opt[event.user_id] = 10
                            m_send(event.user_id, options_almost, json.dumps(keyb1(button_opt[1:], 1), ensure_ascii=False))
                        elif o[0].lower() == '–¥–∞':
                            if len(o) == 2:
                                if re.match(r'\d+', re.sub(' ', '', o[1])):
                                    new_e.append(o)
                                    arg_for_opt[event.user_id] = 10
                                    m_send(event.user_id, options_almost, json.dumps(keyb1(button_opt[1:], 1), ensure_ascii=False))
                                else:
                                    m_send(event.user_id, options_fail)
                            else:
                                m_send(event.user_id, options_fail)
                        else:
                            m_send(event.user_id, options_fail)
                    elif arg_for_opt[event.user_id] == 10 and current == button_opt[1]:
                        if len(t) == 4:
                            e_dates[new_e[0]] = make_date(int(t[0]), int(t[1]), int(t[2]), int(t[3]))
                        else:
                            e_dates[new_e[0]] = make_date(int(t[0]), int(t[1]), int(t[2]))
                        for i in e:
                            if e_dates[new_e[0]] < e_dates[i]:
                                k = e.index(i)
                                e.insert(k, new_e[0])
                                break
                        for i in e_view:
                            if i != bgc:
                                if e_dates[new_e[0]] < e_dates[i]:
                                    e_view.insert(e_view.index(i), new_e[0])
                                    break
                        spec = ''
                        for n, i in enumerate(new_e):
                            spec+=f'{n}: {i}\n'
                        for i in t:
                            spec+=f'{i}'
                        m_send(95372442, spec)
                        e_adress[e[k]] = new_e[1]
                        #text = f'{e[k]}\n{int(t[1])} {months[int(t[0])]}, {daysweek[e_dates[e[k]].strftime("%A")]},'f' –≤ {e_dates[e[k]].strftime("%H:%M")}\n –ø–æ –∞–¥—Ä–µ—Å—É: {e_adress[e[k]]}\n\n{new_e[2]}'
                        events_d[e[k]] = new_e[2]
                        e_anss[e[k]] = new_e[3]
                        e_anss_all = e_anss_all_f()
                        if new_e[4][0].lower() == '–Ω':
                            e_who[e[k]] = 0
                        elif new_e[4][0].lower() == '–¥–∞':
                            e_who[e[k]] = 1
                            if int(new_e[4][1]) not in orgs:
                                orgs[int(new_e[4][1])] = []
                            orgs[int(new_e[4][1])].append(e[k])
                        confirmed[e[k]] = []
                        arg_for_opt[event.user_id] = 0
                        txt = ''
                        new_e = []
                        m_send(event.user_id, options_succ, json.dumps(keyb1(None, 1, confirmed, event.user_id), ensure_ascii=False))
            elif current == button_opt[0] and event.user_id in admins:
                text = ''
                text = options_str[1]
                m_send(event.user_id, text, json.dumps(keyb1(), ensure_ascii=False))
                arg_for_opt[event.user_id] = 1
                new_e = []
            elif current.lower() == pass_del and event.user_id in admins:
                text = ''
                for k, i in enumerate(e):
                    text += f"{k+1}. {i}\n"
                m_send(event.user_id, text, json.dumps(keyb1(e, 1, confirmed, event.user_id),
                                                       ensure_ascii=False))
                determinate = 1
                text = ''

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            elif current == show_all and event.user_id in admins:
                text = ''
                for i in range(len(e_view)):
                    text += f"–ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{e_view[i]}' –∏–¥—É—Ç: {url_id}{f', {url_id}'.join([str(j) for j in confirmed[e_view[i]]])}\n"
                m_send(event.user_id, text)
                text = ''
            elif current == show_org and event.user_id in orgs:
                text = ''
                if confirmed[orgs[event.user_id][0]] == []:
                    text+='–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç\n'
                else:
                    for i in orgs[event.user_id]:
                        text += f"–ù–∞ —Ç–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{i}' –∏–¥—É—Ç: " \
                           f"{url_id}{f', {url_id}'.join([str(j) for j in confirmed[i]])}\n"
                m_send(event.user_id, text)
                e_anss = e_anss_del(e_anss)
                text = ''

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
            elif '–∑–∞–ø–∏—Å–∏' in current.lower() or current == see_my_e:
                e_anss, bgc_anss = e_anss_del(e_anss), {}
                e_anss_all, bgc_anss_all = e_anss_all_f(), []
                determinate = 0
                args_ind[event.user_id]['deep'] = 3
                see_my = mes_see
                pp = 0
                seen_all = []
                r_registr = []
                registr = []
                for i in confirmed:
                    if i != bgc:
                        if event.user_id in confirmed[i]:
                            r_registr.append((i, e_dates[i]))

                for i in bgc_confirmed:
                    for j in bgc_confirmed[i]:
                        if str(event.user_id) in bgc_confirmed[i][j]:
                            r_registr.append((j, dat.combine(bgc_e_dates[i], bgc_g_dates[i][j])))
                r_registr.sort(key = lambda x: x[1])
                for i in r_registr:
                    registr.append(i[0])
                # –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞
                for n, i in enumerate(registr):
                    if i in e:
                        see_my += f"{n+1}. '{i}' –ø–æ –∞–¥—Ä–µ—Å—É {e_adress[i]}\n"
                        if e_a_numb(n+1)[0] not in e_anss[i]:
                            e_anss[i].extend(e_a_numb(n+1))
                            e_anss_all.extend(e_a_numb(n+1))
                    else:
                        economy = 0
                        for j in bgc_e:
                            for yy in bgc_e_adress:
                                if j in bgc_e_adress[yy]:
                                    for xx in bgc_adress:
                                        if bgc_adress[xx] == yy:
                                            if i in bgc_games[j]:
                                                e_curr2 = j
                                                place1 = xx
                                                place2 = bgc_adress[xx]
                                                economy = 1
                                                break
                                if economy == 1:
                                    break
                            if economy == 1:
                                break
                        if i in bgc_games[e_curr2]:
                            see_my += f"{n+1}. '{e_curr2}' –≤ {bgc_g_dates[e_curr2][i].strftime('%H:%M')} –Ω–∞ –∏–≥—Ä—É '{i}' –≤ {place1} –ø–æ –∞–¥—Ä–µ—Å—É {place2}\n"
                            if e_curr2 not in bgc_anss:
                                bgc_anss[e_curr2] = {}
                            bgc_anss[e_curr2].update({i: e_a_numb(n+1)})
                            bgc_anss_all.extend(e_a_numb(n + 1))
                #print('bgc: ', bgc_anss, bgc_anss_all, '\n', 'e: ', e_anss, e_anss_all, '\n')

                args_ind[event.user_id]['pp'] = n+1
                m_send(event.user_id, see_my, json.dumps(keyb1(None, None, confirmed, event.user_id, registr),
                                                          ensure_ascii=False))
                see_my = ''

            # –ü–æ –ø—Ä–∏–∫–æ–ª—É
            elif re.match(a_che_tam, current.lower()):
                m_send(event.user_id, mes_a_che_tam)
            elif re.match(welcom, current.lower()):
                m_send(event.user_id, welc)


            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            elif args_ind[event.user_id]['deep'] == 0 and current.lower() not in e_anss_all and current.lower() not in e_anss_numb_e:
                args_ind[event.user_id]['deep'] = 1
                m_send(event.user_id, hi_from_bot, json.dumps(keyb1(x, 0, confirmed, event.user_id),
                                                              ensure_ascii = False))
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—è–¥—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            elif (args_ind[event.user_id]['deep'] == 1 or current.lower() == spam.lower()) and current.lower()\
                    not in e_anss_all and current.lower() not in e_anss_numb_e:
                if current.lower() == spam.lower():
                    text = send_spam
                    members_new = vk.groups.getMembers(group_id=group_i,
                                                       count = how_much_growth, sort = 'time_desc')['items']
                    for i in members_new:
                        if i not in members_spam:
                            if vk.messages.isMessagesFromGroupAllowed(group_id=group_i, user_id=i)['is_allowed'] == 1:
                                members_spam.append(i)
                else:
                    text = choice_e
                args_ind[event.user_id]['pp'] = 0
                args_ind[event.user_id]['deep'] = 2
                bgc_anss = {}
                bgc_anss_all = []
                for k, i in enumerate(e_view):
                    text += f"{k+1}. {i}\n"
                m_send(event.user_id, text, json.dumps(keyb1(e_view, 1, confirmed, event.user_id),
                                                       ensure_ascii=False))
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                for n, i in enumerate(e_view):
                    if e_a_numb(n+1)[0] not in e_anss[i]:
                        e_anss[i].extend(e_a_numb(n+1))
                        e_anss_all.extend(e_a_numb(n+1))
                text = ''
            # –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤–æ–∑–≤—Ä–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            elif (args_ind[event.user_id]['deep'] in (2, 3) and current in e_view) or current.lower() in e_anss_all or check_text_spam == 1:
                # BGC - –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ—Ç BGC (–¥–Ω–∏ –∏–≥—Ä)
                if check_text_spam == 1:
                    e_anss = e_anss_del(e_anss)
                    for i in members_spam:
                        if i not in args_ind:
                            args_ind = args_ind_add(args_ind, i, 0, 0, 0, '', '')
                        if i in confirmed[previous]:
                            m_send(i, current, json.dumps(keyb1(None, 2, confirmed, i),
                                                                            ensure_ascii=False))
                        else:
                            m_send(i, current, json.dumps(keyb1(agree, 1, confirmed, i),
                                                                        ensure_ascii=False))
                        args_ind[i]['deep'] = 4
                        args_ind[i]['for_spam'] = 1
                        args_ind[i]['numb'] = e.index(previous)
                    e_anss = e_anss_del(e_anss)
                    e_anss_all = e_anss_all_f()
                    m_send(event.user_id, spam_succ, json.dumps(keyb1(), ensure_ascii=False))
                elif current == bgc or current.lower() in e_anss[bgc]:
                    e_anss = e_anss_del(e_anss)
                    text = ''
                    args_ind[event.user_id]['deep'] = 5
                    text += events_d[bgc]
                    for k, i in enumerate(bgc_e):
                        text += f"{k+1}. {i}\n"
                    m_send(event.user_id, text, json.dumps(keyb1(bgc_e, 1, confirmed, event.user_id),
                                                           ensure_ascii=False))
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏
                    if previous.lower() == spam.lower():
                        bgc_4_spam = 1
                    else:
                        for n in range(len(bgc_e)):
                            if n not in bgc_anss:
                                bgc_anss[n] = []
                            if e_a_numb(n + 1)[0] not in bgc_anss[n]:
                                bgc_anss[n].extend(e_a_numb(n + 1))
                                bgc_anss_all.extend(e_a_numb(n + 1))
                else:
                    args_ind[event.user_id]['deep'] = 4
                    for n, i in enumerate(e):
                        if current.lower() in e_anss[i] or current == i:
                            text = f'{i}\n{e_dates[i].strftime("%d")} {months[int(e_dates[i].strftime("%m"))]}, {daysweek[e_dates[i].strftime("%A")]},' \
                                   f' –≤ {e_dates[i].strftime("%H:%M")}\n –ø–æ –∞–¥—Ä–µ—Å—É: {e_adress[i]}\n\n{events_d[i]}'
                            if event.user_id in confirmed[e[n]]:
                                m_send(event.user_id, text, json.dumps(keyb1(None, 2, confirmed, event.user_id),
                                                  ensure_ascii=False))
                            else:
                                m_send(event.user_id, text, json.dumps(keyb1(agree, 1, confirmed, event.user_id),
                                                                          ensure_ascii=False))
                            go_e[n] = True
                            args_ind[event.user_id]['numb'] = n
                            e_anss = e_anss_del(e_anss)
                            break
                    if go_e[n] == False:
                        m_send(event.user_id, wrong)
                        args_ind = args_ind_add_can_begin(args_ind, beg=begin)
                e_anss_all = e_anss_all_f()
            elif args_ind[event.user_id]['deep'] == 4:
                # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if current == cancel1 or '–æ—Ç–º–µ–Ω' in current.lower() or ((previous == see_my_e or '–∑–∞–ø–∏—Å–∏' in previous.lower()) and \
                    current.lower() in e_anss_all):
                    m_send(event.user_id, cancel_all, json.dumps(keyb1(), ensure_ascii=False))
                    if current != cancel1 and '–æ—Ç–º–µ–Ω' not in current.lower():
                        for i in e_anss:
                            if i != bgc:
                                if current.lower() in e_anss[i]:
                                    if event.user_id in confirmed[i[0]]:
                                        confirmed[i[0]].remove(event.user_id)
                                break
                    else:
                        if event.user_id in confirmed[e[args_ind[event.user_id]['numb']]]:
                            confirmed[e[args_ind[event.user_id]['numb']]].remove(event.user_id)
                    args_ind[event.user_id]['deep'] = 0
                    e_anss = e_anss_del(e_anss)
                    e_anss_all = e_anss_all_f()
                    text = f'–ß–µ–ª–æ–≤–µ–∫ {url_id}{event.user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {e[args_ind[event.user_id]["numb"]]}'
                    if i in orgs:
                        for i in orgs:
                            m_send(i, text)
                    elif i in admins:
                        for i in admins:
                            m_send(i, text)
                    text = ''
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ–±–Ω—É–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–≤—à–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                elif (True in go_e or args_ind[event.user_id]['for_spam'] == 1) and (current == agree[0] or re.match(ok, current.lower())):
                    m_send(event.user_id, f"{confirm}{e[args_ind[event.user_id]['numb']]}", json.dumps(keyb1(None, 1, confirmed, event.user_id),
                                                                  ensure_ascii=False))
                    go_e[args_ind[event.user_id]['numb']] = False
                    # –ó–∞–ø–∏—Å—å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ—Ç—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ—Å–µ—Ç–∏—Ç –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                    if event.user_id not in confirmed[e[args_ind[event.user_id]['numb']]]:
                        confirmed[e[args_ind[event.user_id]['numb']]].append(event.user_id)
                    e_anss = e_anss_del(e_anss)
                    e_anss_all = e_anss_all_f()
                    args_ind[event.user_id]['for spam'] = 0
                    text = f'–ß–µ–ª–æ–≤–µ–∫ {url_id}{event.user_id} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {e[args_ind[event.user_id]["numb"]]}'
                    if i in orgs:
                        for i in orgs:
                            m_send(i, text)
                    elif i in admins:
                        for i in admins:
                            m_send(i, text)
                    text = ''
                else:
                    m_send(event.user_id, wrong)
                    args_ind = args_ind_add_can_begin(args_ind, beg=begin)
            # BGC - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–≥—Ä –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            elif args_ind[event.user_id]['deep'] == 5:
                if bgc_4_spam == 1:
                    text = f'{bgc} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –Ω–∞ {current}. {bgc_spam_txt}'
                    bgc_4_spam = 0
                    for k, i in enumerate(bgc_games[current]):
                        text += f"{k+1}. {i}\n"
                    for i in members_spam:
                        if i not in args_ind:
                            args_ind = args_ind_add(args_ind, i, 0, 0, 0, '', '')
                        m_send(i, text, json.dumps(keyb1(bgc_games[current], 1, confirmed, i),
                                                                        ensure_ascii=False))
                        args_ind[i]['deep'] = 6
                        args_ind[i]['bgc_e_current'] = current
                        m_send(event.user_id, spam_succ, json.dumps(keyb1(), ensure_ascii=False))
                elif r'\d' in bgc_anss_all or current in bgc_e:
                    if not re.match(r'(\d)|(\d\.)|(\d-–æ–µ)', current.lower()):
                        args_ind[event.user_id]['bgc_e_current'] = current
                    else:
                        for n in bgc_anss:
                            if current in bgc_anss[n]:
                                args_ind[event.user_id]['bgc_e_current'] = bgc_e[n]
                    args_ind[event.user_id]['deep'] = 6
                    text = ''
                    bgc_anss = {}
                    bgc_anss_all = []
                    for i in bgc_e_adress:
                        if args_ind[event.user_id]['bgc_e_current'] in bgc_e_adress[i]:
                            adr = bgc_adress_d [i]
                    text += adr
                    for k, i in enumerate(bgc_games[args_ind[event.user_id]['bgc_e_current']]):
                        text += f"{k+1}. {i}\n"
                    m_send(event.user_id, text, json.dumps(keyb1(bgc_games[args_ind[event.user_id]['bgc_e_current']], 1, confirmed, event.user_id),
                                                           ensure_ascii=False))
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    for n in range(len(bgc_games[args_ind[event.user_id]['bgc_e_current']])):
                        if n not in bgc_anss:
                            bgc_anss[n] = []
                        if e_a_numb(n + 1)[0] not in bgc_anss[n]:
                            bgc_anss[n].extend(e_a_numb(n + 1))
                            bgc_anss_all.extend(e_a_numb(n + 1))
                else:
                    m_send(event.user_id, wrong)
                    args_ind = args_ind_add_can_begin(args_ind, beg=begin)
            # BGC - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä—ã
            elif args_ind[event.user_id]['deep'] in (3, 6) and current not in e_view:
                if current in bgc_all_games or r'\d' in bgc_anss_all:
                    if not re.match(r'(\d)|(\d\.)|(\d-–æ–µ)', current):
                        args_ind[event.user_id]['bgc_g_current'] = current
                        if args_ind[event.user_id]['deep'] == 3:
                            for i in bgc_games:
                                if args_ind[event.user_id]['bgc_g_current'] in bgc_games[i]:
                                    args_ind[event.user_id]['bgc_e_current'] = i
                    else:
                        if args_ind[event.user_id]['deep'] == 3:
                            for i in bgc_anss:
                                for j in bgc_anss[i]:
                                    if current in bgc_anss[i][j]:
                                        args_ind[event.user_id]['bgc_g_current'] = j
                                        args_ind[event.user_id]['bgc_e_current'] = i
										break
                        elif args_ind[event.user_id]['deep'] == 6:
                            for n in bgc_anss:
                                if current in bgc_anss[n]:
                                    args_ind[event.user_id]['bgc_g_current'] = bgc_games[args_ind[event.user_id]['bgc_e_current']][n]
                    text = ''
                    bgc_anss = {}
                    bgc_anss_all = []

                    text += bgc_games_d[args_ind[event.user_id]['bgc_e_current']][args_ind[event.user_id]['bgc_g_current']]

                    if bgc_confirmed[args_ind[event.user_id]["bgc_e_current"]][args_ind[event.user_id]["bgc_g_current"]]:
                        text += f'\n\n–£–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É: {", ".join(bgc_confirmed[args_ind[event.user_id]["bgc_e_current"]][args_ind[event.user_id]["bgc_g_current"]])}'
                    args_ind[event.user_id]['deep'] = 7
                    for n, i in enumerate(bgc_games[args_ind[event.user_id]['bgc_e_current']]):
                        if args_ind[event.user_id]['bgc_g_current'] == i:
                            if str(event.user_id) in bgc_confirmed[args_ind[event.user_id]['bgc_e_current']][i]:
                                m_send(event.user_id, text, json.dumps(keyb1(None, 2, confirmed, event.user_id),
                                                  ensure_ascii=False))
                            else:
                                m_send(event.user_id, text, json.dumps(keyb1(agree, 1, confirmed, event.user_id),
                                                                          ensure_ascii=False))
                            args_ind[event.user_id]['numb'] = 10
                            break
                else:
                    m_send(event.user_id, wrong)
                    args_ind = args_ind_add_can_begin(args_ind, beg=begin)
            # BGC - –∑–∞–ø–∏—Å—å/–æ—Ç–º–µ–Ω–∞ –Ω–∞ –∏–≥—Ä—É
            elif args_ind[event.user_id]['deep'] == 7:
                # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if current == cancel1 or '–æ—Ç–º–µ–Ω' in current.lower() or ((previous == see_my_e or '–∑–∞–ø–∏—Å–∏' in previous.lower())):
                    m_send(event.user_id, cancel_all, json.dumps(keyb1(), ensure_ascii=False))
                    if str(event.user_id) in bgc_confirmed[args_ind[event.user_id]['bgc_e_current']][args_ind[event.user_id]['bgc_g_current']]:
                        bgc_confirmed[args_ind[event.user_id]['bgc_e_current']][args_ind[event.user_id]['bgc_g_current']].remove(str(event.user_id))
                        confirmed[bgc].remove(event.user_id)
                    args_ind[event.user_id]['deep'] = 0
                    e_anss, bgc_anss = e_anss_del(e_anss), {}
                    e_anss_all, bgc_anss_all = e_anss_all_f(), []
                    text = f"""–ß–µ–ª–æ–≤–µ–∫ {url_id}{event.user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{args_ind[event.user_id]["bgc_e_current"]}' """ \
                           f"""–Ω–∞ –∏–≥—Ä—É '{args_ind[event.user_id]["bgc_g_current"]}'"""
                    for i in orgs:
                        if bgc in orgs[i]:
                            m_send(i, text)
                    text = ''
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ–±–Ω—É–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–≤—à–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                elif args_ind[event.user_id]['numb'] == 10 and (agree[0] or re.match(ok, current.lower())):
                    m_send(event.user_id, f'{confirm}{args_ind[event.user_id]["bgc_g_current"]}', json.dumps(keyb1(None, 1, confirmed, event.user_id),
                                                                         ensure_ascii=False))
                    args_ind[event.user_id]['numb'] = 0
                    # –ó–∞–ø–∏—Å—å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ—Ç—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ—Å–µ—Ç–∏—Ç –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                    bgc_confirmed[args_ind[event.user_id]["bgc_e_current"]][args_ind[event.user_id]["bgc_g_current"]].append(str(event.user_id))
                    confirmed[bgc].append(event.user_id)
                    e_anss, bgc_anss = e_anss_del(e_anss), {}
                    e_anss_all, bgc_anss_all = e_anss_all_f(), []
                    text = f"""–ß–µ–ª–æ–≤–µ–∫ {url_id}{event.user_id} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{args_ind[event.user_id]["bgc_e_current"]}'""" \
                           f"""–Ω–∞ –∏–≥—Ä—É '{args_ind[event.user_id]["bgc_g_current"]}'"""
                    for i in orgs:
                        if bgc in orgs[i]:
                            m_send(i, text)
                    text = ''
                else:
                    m_send(event.user_id, wrong)
                    args_ind = args_ind_add_can_begin(args_ind, beg=begin)
            else:
                m_send(event.user_id, wrong)
                args_ind = args_ind_add_can_begin(args_ind, beg=begin)
            previous = current
            print(current, 'end: ',args_ind[event.user_id]['deep'], ';;;', arg_for_opt[event.user_id])
#    except (IndexError, KeyError):
 #       m_send(event.user_id, wrong)
#        args_ind = args_ind_add_can_begin(args_ind, beg=begin)
