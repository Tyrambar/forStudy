from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, InlineQueryHandler, RegexHandler, BaseFilter
from telegram import InlineQueryResultArticle, InputTextMessageContent, KeyboardButton, ReplyKeyboardMarkup
import re
import logging
from datetime import datetime

TG_URL = 'https://telegg.ru/orig/bot'
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                     level=logging.INFO)

# Default buttons
to_begin = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
cancel1 = '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'
see_my_e = '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'
x = '–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
agree = '–ü–æ–π–¥—É –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
button_opt = ['–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ']
button_opt_edit = ['–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –¥–∞–ª—å—à–µ', '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']
show_org = '–ú–æ–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏'
show_all = '—á–æ –ø–æ —á–µ–º?'


# Default messages from bot
hi_from_bot = ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.\n"
"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–µ –∏–∑ –Ω–∏—Ö –∏ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏üôÇ."
"–ê –µ—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ—Ç–º–µ–Ω–∏—Ç—å –∏—Ö\n"
"üìå–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä—è–¥–æ–º —Å–æ —Å–º–∞–π–ª–æ–º. "
"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
choice_e = '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:\n'
confirm = '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '
wrong = ('üòî –Ø –Ω–µ –º–æ–≥—É –≤–∞—Å –ø–æ–Ω—è—Ç—å\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞:\n'
'üìå –û—Ç–∫—Ä–æ–π—Ç–µ —Ä—è–¥–æ–º —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\nüìå –ù–∞–ø–∏—à–∏—Ç–µ –ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ')
cancel_all = '–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.'
mes_see = '–ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èüí¨, –∫—É–¥–∞ –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å.\n' \
          '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä ' \
          '—Ç–∞–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"\n–†–∞–Ω–µ–µ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞:\n'

options = '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—ç—Ç–∞–ø–Ω–æ :\n' \
          'üìå–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ\n' \
          'üìå–ê–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü—Ä–∏–º–µ—Ä: –ú–∞—Ä–æ—Å–µ–π–∫–∞ 13—Å1\n' \
          'üìå–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–º–µ—Å—è—Ü, –¥–∞—Ç–∞, —á–∞—Å - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ü—Ä–∏–º–µ—Ä: 5, 25, 18\n' \
          'üìå–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n' \

choose_edit_e = '–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å:\n'
old_option = '\n–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n'
options_edit_succ = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'
fail_right_4_edit_e = '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ—ç—Ç–æ–º—É –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å'

options_str = options.split('\n')
options_fail = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ'
options_almost = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
options_succ = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!'

destroy_succ = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–µ–ø–µ–ª–µ–Ω–æ!!!'

mes_a_che_tam = '–ù–æ—Ä–º–∞—Å\n–Ω–∞ –¥–≤–∏–∂-—Ç–æ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø–æ–π–¥–µ—à—å?'
welc = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞)\n–≠—Ç–æ –º–æ—è —Ä–∞–±–æ—Ç–∞üòÑ'

# Regular Expressions
ok = r'(–∑–∞–ø–∏—Å–∞—Ç—å—Å—è)|(—Ö[–æ—á—É–∞—Ç—é]{3})|(–¥[–∞–æ]–≤–∞–π)|(–ø[–∞–æ]–π[–¥—É–µ—ë–º—Ç–∏])|(–ø[–∞–æ]?—à–ª–∏)|(–¥–∞+)|((–≥–æ)+—É*)|(–∏–¥[—ë–µ–º–¥—É])|(–∫[–∞–æ]–Ω–µ[—á—à]–Ω[–∞–æ]*)|(–æ–∫[–µ–π–∏]*)'
nearest = r'(–±–ª–∏–∑?–∂–∞–π—à[–∏–µ]–µ!*)|([–ø–æ—Å–ª–µ]*–∑–∞–≤—Ç—Ä[–∞–æ])|([–≤ ]*–≤—ã—Ö–æ–¥–Ω[—ã–µ–æ–π]*)'
begin = r'(–º–µ–Ω—é)|(—Å—Ç–∞—Ä—Ç[—É–π]*)|(–ø—Ä–∏–≤[–µ—Ç—Å—Ç–≤—É—é]*)|(–¥–æ–±—Ä[–æ–≥–æ—ã–π–µ]+( )?[—É—Ç—Ä–æ–∞–¥–Ω—è–¥–µ–Ω—å–≤–µ—á–µ—Ä–∞]*)|' \
        r'([–≤—Å]* ?–Ω–∞—á[–Ω–∏–∞–ª–æ–∞—Ç—å]*)|(–∑?–¥[–∞–æ]+—Ä[–∞–æ–≤–∞—Å—Ç–≤—É–π—Ç–µ]+)|(—Ö–∞–π)|(hi)|(hello)|(–∫—É)'
a_che_tam = r'([–∞ ]*—á[–µ—ë–æ]{1} —Ç–∞–º\??)|(–∫–∞–∫ [—Ç—ã–¥–µ–ª–∞]\??)'
welcom = r'(—Å?–ø–∞—Å[–∏–µ]–±[–∞–æ]*)|(–±–ª–∞–≥–æ–¥–∞—Ä—é?[—Å—Ç–≤—É—é]*[–∏–º]*)|(–Ω–æ?—Ä–º[–∞—Å]*)|(–∫ ?—Ä ?–∞ ?—Å ?[–∏–∞]? ?–≤ ?[–∞–æ]?[—á–∏–∫]*)'

e = ["–§–µ—Å—Ç–∏–≤–∞–ª—å 25.05 12—á –º.–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è", "–ù–∞—Å—Ç–æ–ª–∫–∏ 26.05 18—á –º.–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥", "–¢—É—Å–∞ –≤ –¢—É—Ä—Ü–∏–∏ 1-15 –∏—é–ª—è"]
e_adress = ["–ù–∏–∂–Ω—è—è –ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è 35—Å–ö", '–ú–∞—Ä–æ—Å–µ–π–∫–∞ 13—Å1', '–¢—É—Ä—Ü–∏—è']
def make_date(month, date, hour, min = 0):
    return datetime(2019, month, date, hour, min)
e_dates = {
    e[0]: datetime(2019, 5, 25, 19),
    e[1]: datetime(2019, 5, 26, 19),
    e[2]: datetime(2019, 7, 1, 1)
}
months = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è',
          7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è',  11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'}
daysweek = {'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '—Å—Ä–µ–¥–∞',
'Thursday': '—á–µ—Ç–≤–µ—Ä–≥','Friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'Saturday': '—Å—É–±–±–æ—Ç–∞', 'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}

#95372442, 159542333, 166307242, 382620531, 293320616, 273880438
#confirmed = {e[0]: [], e[1]: [], e[len(e)-1]: []}
events_d = {
e[0]: (
'–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —Å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ª–µ–∫—Ü–∏—è–º–∏ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞–º–∏ 25 –º–∞—è —Å 12:00 —Ä—è–¥–æ–º —Å –º. –ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è (–∏–ª–∏ –ë–∞—É–º–∞–Ω—Å–∫–∞—è), –ø–æ –∞–¥—Ä–µ—Å—É –ù–∏–∂–Ω—è—è –ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è 35—Å–ö.\n'
'–ú—ã –∂–¥–µ–º –≤—Å–µ—Ö, –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∫–∞–ª–µ–π–¥–æ—Å–∫–æ–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π –†–æ—Å—Å–∏–∏ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ 40 –ª–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—É–ª—å—Ç—É—Ä—ã, –∏—Å–∫—É—Å—Å—Ç–≤–∞, '
'–≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—Ä–µ–¥—ã, –º—É–∑—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n' '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–ö—É–ª—å—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ".\n\n'
'üòØ–í–ø–µ—Ä–≤—ã–µ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ú–æ—Å–∫–≤—ã ‚Äî —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ ¬´–ø–æ—Ä—Ç–∞–ª—ã¬ª '
'–≤ –ø—Ä–æ—à–ª–æ–µ, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –ª–µ–∫—Ü–∏–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –∫—É–ª—å—Ç—É—Ä—ã, –∞ —Ç–∞–∫–∂–µ –≤–æ–ª—à–µ–±–Ω—ã–π '
'–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ "–í—Å–µ —Å–≤–æ–∏": —ç—Ç–æ —Å—Ç–µ–Ω–¥-–∞–ø, –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –∫–∞—Ä–∞–æ–∫–µ –ø–æ–¥ –≥–∏—Ç–∞—Ä—É.\n'
'–ë—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ   –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æüë®üéì, –≤—Å–µ –∫–∞–∫ –º—ã –ª—é–±–∏–º: —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Ä–µ—Ç—Ä–æ-–∞–≤—Ç–æ–º–∞—Ç–∞–º–∏, –ø–∏–Ω–≥-–ø–æ–Ω–≥–æ–º, –º–µ—Ö–µ–Ω–¥–∏ –∏ –∞–Ω—Ç—É—Ä–∞–∂–Ω—ã–º–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏—è–º–∏.\n\n'
'–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:\n'
'üìå–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫:\n'
'12:30-14:00 ‚Äì ¬´–ò —Ç–æ–≥–¥–∞ –æ–±–∏–¥–µ–ª–æ—Å—å –≤—Ä–µ–º—è‚Ä¶: –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —ç–ø–æ—Ö–∏ –ó–∞—Å—Ç–æ—è¬ª. –õ–µ–∫—Ü–∏—è –ò—Ä–∏–Ω—ã –ì–ª—É—â–µ–Ω–∫–æ (–ù–ò–£ –í–®–≠)\n'
'14:30-16:30 ‚Äì ¬´–ó–∞ —Å—Ç–æ–ª–æ–º¬ª: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ 2010-—Ö –≤ –†–æ—Å—Å–∏–∏, —ç–∫–æ–ª–æ–≥–∏–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ —Ñ–µ–º–∏–Ω–∏–∑–º–∞\n'
'16:30-17:30 ‚Äì ¬´–ü–æ–ø-–º—É–∑—ã–∫–∞ 3019 –≥–æ–¥–∞ –∏–ª–∏ –ü–æ—á–µ–º—É –ø–æ–ø-–º—É–∑—ã–∫–∞ ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–≤–∞–Ω–≥–∞—Ä–¥¬ª. –õ–µ–∫—Ü–∏—è –ì—Ä–∏—à–∏ –ü—Ä–æ—Ä–æ–∫–æ–≤–∞ (–∫–∞–Ω–∞–ª Blitz and Chips)\n\n'
'üìå–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:\n'
'12:00 ‚Äî 13:00 –£—Ç—Ä–µ–Ω–Ω—è—è –π–æ–≥–∞ –æ—Ç —Å—Ç—É–¥–∏–∏ Zaryad\n'
'13:30 ‚Äî 14:30 Sekta: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ —Å—Ç–∏–ª–µ 90-—Ö\n'
'13:00 ‚Äî 14:00 –ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É—Ö–Ω–∏ –æ—Ç FOOD TASTY cafe\n'
'14:30 ‚Äî 16:40 –¢—É—Ä–Ω–∏—Ä –ø–æ –ø–∏–Ω–≥-–ø–æ–Ω–≥—É Ping Tablet\n'
'14:00 ‚Äî 18:00 –ú–µ—Ö–µ–Ω–¥–∏ –¥–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö\n'
'15:00 ‚Äî 16:00 Mynameisspace: –ª–µ–∫—Ü–∏—è ‚Äî –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å ¬´–ù–∞—Ñ—Ç–∞–ª–∏–Ω –∏–ª–∏ –∑–∞—á–µ–º –Ω–∞–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ¬ª\n'
'15:00 ‚Äî 16:00 MAGIC LAB: —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å "–¶–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ"\n'
'18:00 ‚Äî 21:00 –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫ –í–°–ï –°–í–û–ò\n'
),
e[1]: ('–•–µ–π, —Å–∫—É—á–∞–ª –ø–æ –Ω–∞—à–∏–º –Ω–∞—Å—Ç–æ–ª–∫–∞–º?\n\n'
"–ü—Ä–∏—Ö–æ–¥–∏ –≤ –∞–Ω—Ç–∏–∫–∞—Ñ–µ Jeffrey's Coffee –Ω–∞ –ú–∞—Ä–æ—Å–µ–π–∫–µ –∏ —Å—Ä–∞–∑–∏—Å—å —Å –ª—É—á—à–∏–º–∏ –∏–∑ –ª—É—á—à–∏—Ö!\n"
'–ù–µ —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö? –ù–µ –∑–Ω–∞–µ—à—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã? –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ù–∞—à–∏ –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ–¥—É—â–∏–µ –≤—Å–µ–º—É –Ω–∞—É—á–∞—Ç –∏ –æ–±–æ –≤—Å–µ–º —Ä–∞—Å—Å–∫–∞–∂—É—Ç.\n'
'–°—á–∏—Ç–∞–µ—à—å —Å–µ–±—è —ç–∫—Å–ø–µ—Ä—Ç–æ–º? –ü—Ä–∏—Ö–æ–¥–∏ –∏ –¥–æ–∫–∞–∂–∏!\n'
'–ü—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è? –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ–≤–µ–¥–∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –≤–µ—á–µ—Ä.\n'),
e[len(e)-1]: ("–õ–µ—Ç–æ–º, —Å 1 –ø–æ 15 –∏—é–ª—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è Sea || Summer || Students - –±–æ–ª—å—à–∞—è –ª–µ—Ç–Ω—è—è —Ç—É—Å–æ–≤–∫–∞ –Ω–∞ –º–æ—Ä–µ –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏.\n"
"–ë–æ–ª–µ–µ 100 —á–µ–ª–æ–≤–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ —é–∂–Ω—ã–π –±–µ—Ä–µ–≥ –¢—É—Ä—Ü–∏–∏. –£–∂–µ –≤—Ç–æ—Ä–æ–π –ø–æ —Å—á–µ—Ç—É –≤—ã–µ–∑–¥ —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –º–∞—Å—à—Ç–∞–±–Ω–µ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!\n"
"–ë–∞—Ä—ã, –¥–∏—Å–∫–æ—Ç–µ–∫–∏, —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏ –∫–≤–µ—Å—Ç—ã - –Ω–∞–º –±—É–¥–µ—Ç —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è! "
"–ê —Ç–µ–ø–ª–æ–µ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–µ –º–æ—Ä–µ —Å–æ–∑–¥–∞—Å—Ç –ª—É—á—à—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –º–æ–ª–æ–¥–µ–∂–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞)")
}

# Main classes
class Arg:
    def __init__(self, numb_see_my_e, deep, previous, see_my_e_lst, change):
        self.numb_see_my_e = numb_see_my_e
        self.deep = deep
        self.previous = previous
        self.see_my_e_lst = see_my_e_lst
        self.change = change

class User:
    users = {}
    def __init__(self, chat_id, numb_see_my_e,
                    deep, previous, see_my_e_lst, change = 0):
        self.u = chat_id
        User.users[self.u] = Arg(numb_see_my_e, deep, previous, see_my_e_lst, change)


class Event:
    evs_names = []
    confirmed_all = []
    host_all = []
    def __init__(self, name, addr, date, desc, host_id):
        self.date = date
        self.address = addr
        self.description = desc
        self.name = name
        self.host_id = host_id
        Event.host_all.append(self.host_id)
        self.confirmed = []
        self.nicknames = []
        if evs:
            for i in Event.evs_names:
                if self.date < evs[i].date:
                    self.ev_id = Event.evs_names.index(i)
                    Event.evs_names.insert(self.ev_id, self.name)
                    break
            else:
                Event.evs_names.append(self.name)
                self.ev_id = len(Event.evs_names)
        else:
            Event.evs_names.append(self.name)

    def __str__(self):
        return self.name
    def __repr__(self):
        return self.name + '__class_Event'

#ex_evs_objs = [make_date(1, 1, 1, 1) for _ in range(3)]
admin = 203292486
ex_evs_objs = {}
evs = {}
for i in range(3):
    ex_evs_objs[e[i]] = Event(e[i], e_adress[i], e_dates[e[i]], events_d[e[i]], admin)
evs = ex_evs_objs.copy()
print(evs)
#argss_ind[ind_id] = {'numb_see_my_e': pp, 'deep': deep, 'previous': prev, 'see_my_e_lst': see_my_e_lst}

#us = User(12345, 3, 2, 'some', ['aha', 'huh'])
#print(12345 in User.users, us.users[12345], User.users[12345].numb_see_my_e)

# Helping funcs
def m_send(up, co, txt, keyboard = None,):
    return co.bot.send_message(chat_id=up.message.chat_id, text=txt, reply_markup=keyboard)

def make_menu(user_arg, buttons = [], n_cols=1, footer_buttons = [to_begin], seeing_my_e = 0, while_edit = 0):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    pre_footer_buttons = []
    print(footer_buttons, Event.confirmed_all)
    if not while_edit:
        if user_arg in Event.confirmed_all:
            if see_my_e not in footer_buttons:
                pre_footer_buttons.append(see_my_e)
            if seeing_my_e:
                pre_footer_buttons.remove(see_my_e)
        if see_my_e in footer_buttons and not user_arg in Event.confirmed_all:
            pre_footer_buttons.remove(see_my_e)
        if user_arg in Event.host_all:
            pre_footer_buttons.append(show_org)
    if pre_footer_buttons:
        menu.append(pre_footer_buttons)
    if footer_buttons:
        menu.append(footer_buttons)

    return menu

def check_input_number(n, lst):
    if len(n) > 1:
        if re.match(r"\d", n[1]) and int(n[:2]) <= len(lst) - 1:
            return int(n[:2])
        elif int(n[0]) <= len(lst) - 1:
            return int(n[0])
        else:
            return
    else:
        if int(n[0]) <= len(lst):
            return int(n[0])
        else: return



# Main with data
ac_token = ''
updater = Updater(token= ac_token, base_url = TG_URL, use_context= True)
dispatcher = updater.dispatcher


user = None
args_4_create = {}
password = '–ø—Ä–∞–æ—Ç—Ü—ã'
pass_determine = '–∫–∞—Ä–∞'
pass_edit = '–ø—Ä–∞–≤–∫–∞'

# Additional funcs-handlers
def welc_ans(update, context):
    m_send(update, context, welc)

def how_a_u(update, context):
    m_send(update, context, mes_a_che_tam)

def wrong_ans(update, context):
    print(update.message.text)
    m_send(update, context, wrong)


# argss_ind[ind_id] = {'numb_see_my_e': pp, 'deep': deep, 'previous': prev, 'see_my_e_lst': see_my_e_lst}
# Main funcs-handlers
def start(update, context):
    global user
    menu = make_menu(update.message.chat_id, buttons = [x], footer_buttons = [])
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard = True, one_time_keyboard = True)
    m_send(update, context, hi_from_bot, reply_markup)
    user = User(update.message.chat_id, 0, 0, '', [])

    print(update.effective_user.username)

def step_1(update, context):
    global user
    menu = make_menu(update.message.chat_id, Event.evs_names)
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard = True, one_time_keyboard = True)
    text = ''
    if user.users[update.message.chat_id].change == 1:
        text = choose_edit_e
    print(Event.evs_names)
    for kk, i in enumerate(Event.evs_names):
        text += f"{kk+1}. {i}\n"
    m_send(update, context, text, reply_markup)
    if update.message.chat_id not in User.users:
        user = User(update.message.chat_id, 0, 0, '', [])
    if not user.users[update.message.chat_id].change:
        user.users[update.message.chat_id].deep = 1

# Most popular function-handler for processing events, depending from what do you want
def step_in_e(update, context):
    global user, evs
    if update.message.chat_id not in User.users:
        user = User(update.message.chat_id, 0, 0, '', [])
    print('in step_in_e')
    # Function-handler for see some event
    def step_e(update, context, numb = None):
        global user, evs
        if update.message.text in Event.evs_names:
            user.users[update.message.chat_id].previous = update.message.text
            if update.message.chat_id in evs[update.message.text].confirmed:
                menu = make_menu(update.message.chat_id, [cancel1])
            else:
                menu = make_menu(update.message.chat_id, [agree])
            date_of_e = evs[update.message.text].date
            text = f'{user.users[update.message.chat_id].previous}\n' \
                   f'{int(date_of_e.strftime("%d"))} {months[int(date_of_e.strftime("%m"))]}, ' \
                   f'{daysweek[date_of_e.strftime("%A")]}, –≤ {date_of_e.strftime("%H:%M")}\n–ø–æ –∞–¥—Ä–µ—Å—É: ' \
                   f'{evs[update.message.text].address}\n\n' \
                   f'{evs[update.message.text].description}'
            reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
            m_send(update, context, text, reply_markup)

        elif numb:
            if user.users[update.message.chat_id].see_my_e_lst:
                user.users[update.message.chat_id].previous = user.users[update.message.chat_id].see_my_e_lst[numb-1]

                if update.message.chat_id in evs[user.users[update.message.chat_id].previous].confirmed:
                    menu = make_menu(update.message.chat_id, [cancel1])
                else:
                    menu = make_menu(update.message.chat_id, [agree])
                reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
                date_of_e = evs[user.users[update.message.chat_id].previous].date
                text = f'{user.users[update.message.chat_id].previous}\n' \
                       f'{int(date_of_e.strftime("%d"))} {months[int(date_of_e.strftime("%m"))]}, ' \
                       f'{daysweek[date_of_e.strftime("%A")]}, –≤ {date_of_e.strftime("%H:%M")}\n–ø–æ –∞–¥—Ä–µ—Å—É: ' \
                       f'{evs[user.users[update.message.chat_id].previous].address}\n\n' \
                       f'{evs[user.users[update.message.chat_id].previous].description}'
                m_send(update, context, text, reply_markup)
            else:
                user.users[update.message.chat_id].previous = Event.evs_names[numb-1]
                if update.message.chat_id in evs[Event.evs_names[numb-1]].confirmed:
                    menu = make_menu(update.message.chat_id)
                else:
                    menu = make_menu(update.message.chat_id, [agree])
                date_of_e = evs[Event.evs_names[numb-1]].date
                text = f'{user.users[update.message.chat_id].previous}\n' \
                       f'{int(date_of_e.strftime("%d"))} {months[int(date_of_e.strftime("%m"))]}, ' \
                       f'{daysweek[date_of_e.strftime("%A")]}, –≤ {date_of_e.strftime("%H:%M")}\n–ø–æ –∞–¥—Ä–µ—Å—É: ' \
                       f'{evs[Event.evs_names[numb-1]].address}\n\n' \
                       f'{evs[Event.evs_names[numb-1]].description}'
                reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
                m_send(update, context, text, reply_markup)
        else:
            return wrong_ans(update, context)

        if user.users[update.message.chat_id].numb_see_my_e:
            user.users[update.message.chat_id].numb_see_my_e = 0
        user.users[update.message.chat_id].see_my_e_lst = []
        user.users[update.message.chat_id].deep = 2
    # Function-handler for confirm to event
    def step_confirm(update, context):
        global user, evs
        menu = make_menu(update.message.chat_id)
        reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
        m_send(update, context, f'{confirm} `{user.users[update.message.chat_id].previous}`', reply_markup)
        if update.message.chat_id not in evs[user.users[update.message.chat_id].previous].confirmed:
            evs[user.users[update.message.chat_id].previous].confirmed.append(update.message.chat_id)
            Event.confirmed_all.append(update.message.chat_id)
            context.bot.send_message(
                chat_id=evs[user.users[update.message.chat_id].previous].host_id,
                text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{update.effective_user.username} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
            print(evs[user.users[update.message.chat_id].previous])
            evs[user.users[update.message.chat_id].previous].nicknames.append(f'@{update.effective_user.username}')
            print(evs[user.users[update.message.chat_id].previous].nicknames)

    # Function-handler for cancel confirm to event
    def step_canc(update, context):
        global user, evs
        menu = make_menu(update.message.chat_id)
        reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
        m_send(update, context, cancel_all, reply_markup)
        evs[user.users[update.message.chat_id].previous].confirmed.remove(update.message.chat_id)
        Event.confirmed_all.remove(update.message.chat_id)
        context.bot.send_message(
            chat_id=evs[user.users[update.message.chat_id].previous].host_id,
            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{update.effective_user.username} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        evs[user.users[update.message.chat_id].previous].nicknames.remove(
            f'@{update.effective_user.username}')
    # Conditions returns needed function
    if user.users[update.message.chat_id].change == -1:
        return succ_destroy_e_f(update, context)
    elif (update.message.text in Event.evs_names or re.match(r"[1-9]\d?", update.message.text[:2]))\
            and user.users[update.message.chat_id].deep < 10 and user.users[update.message.chat_id].change == 0:
        if update.message.text in Event.evs_names:
            return step_e(update, context)
        elif user.users[update.message.chat_id].numb_see_my_e:
            numb_for_see_my = check_input_number(update.message.text, user.users[update.message.chat_id].see_my_e_lst)
            print(user.users[update.message.chat_id].numb_see_my_e, [j for j in range(1,user.users[update.message.chat_id].numb_see_my_e+1)], numb_for_see_my)
            return step_e(update, context, numb_for_see_my) if numb_for_see_my else wrong_ans(update, context)
        elif user.users[update.message.chat_id].deep == 1 and check_input_number(update.message.text, Event.evs_names):
            return step_e(update, context, check_input_number(update.message.text, Event.evs_names))
        else:
            return wrong_ans(update, context)
    elif update.message.text == agree or re.match(ok, update.message.text):
        return step_confirm(update, context)
    elif update.message.text == cancel1 and \
            update.message.chat_id in evs[user.users[update.message.chat_id].previous].confirmed:
        return step_canc(update, context)
    elif 10 <= user.users[update.message.chat_id].deep < 20:
        return creating_e_f(update, context)
    elif user.users[update.message.chat_id].change == 1 or user.users[update.message.chat_id].deep >= 20:
        return edit_e_f(update, context)
    else:
        return wrong_ans(update, context)

# Seeing yours confirmed
def see_my_e_f(update, context):
    global user, evs
    if update.message.chat_id not in User.users:
        user = User(update.message.chat_id, 0, 0, '', [])
        return wrong_ans(update, context)
    see_my = mes_see
    for i in Event.evs_names:
        if update.message.chat_id in evs[i].confirmed:
            user.users[update.message.chat_id].see_my_e_lst.append(i)
            see_my += f"{user.users[update.message.chat_id].numb_see_my_e+1}. {i} –ø–æ –∞–¥—Ä–µ—Å—É {evs[i].address}\n"
            user.users[update.message.chat_id].numb_see_my_e += 1
    menu = make_menu(update.message.chat_id, user.users[update.message.chat_id].see_my_e_lst, seeing_my_e=1)
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
    m_send(update, context, see_my, reply_markup)
    user.users[update.message.chat_id].deep = 3


# Functions for creating events in bot
def begin_create_e_f(update, context):
    global user
    user = User(update.message.chat_id, 0, 0, '', [])
    menu = make_menu(update.message.chat_id, buttons= [button_opt[0]], while_edit = 1)
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
    m_send(update, context, options, reply_markup)

def to_create_e_f(update, context):
    global user
    user.users[update.message.chat_id].deep = 10
    menu = make_menu(update.message.chat_id, while_edit = 1)
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
    m_send(update, context, options_str[1], reply_markup)

def creating_e_f(update, context):
    global user, args_4_create, evs
    menu = make_menu(update.message.chat_id, while_edit=1)
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)

    if user.users[update.message.chat_id].deep == 10:
        args_4_create['name'] = update.message.text
        user.users[update.message.chat_id].deep = 11
        m_send(update, context, options_str[2], reply_markup)
    elif user.users[update.message.chat_id].deep == 11:
        args_4_create['address'] = update.message.text
        user.users[update.message.chat_id].deep = 12
        m_send(update, context, options_str[3], reply_markup)
    elif user.users[update.message.chat_id].deep == 12:
        t = update.message.text.split(',')
        try:
            if len(t) == 4:
                args_4_create['date'] = make_date(int(t[0]), int(t[1]), int(t[2]), int(t[3]))
            else:
                args_4_create['date'] = make_date(int(t[0]), int(t[1]), int(t[2]))
        except (IndexError, ValueError):
            m_send(update, context, options_fail)
        else:
            user.users[update.message.chat_id].deep = 13
            m_send(update, context, options_str[4], reply_markup)
    elif user.users[update.message.chat_id].deep == 13:
        args_4_create['description'] = update.message.text
        user.users[update.message.chat_id].deep = 14
        menu = make_menu(update.message.chat_id, buttons = [button_opt[1]], while_edit=1)
        reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
        m_send(update, context, options_almost, reply_markup)
    elif user.users[update.message.chat_id].deep == 14 and update.message.text == button_opt[1]:
        new_ev_obj = Event(args_4_create['name'], args_4_create['address'],
                           args_4_create['date'], args_4_create['description'], update.message.chat_id)
        evs[args_4_create['name']] = new_ev_obj
        user.users[update.message.chat_id].deep = 0
        m_send(update, context, options_succ, reply_markup)


# Functions for change existing events in bot
def to_to_edit_e_f(update, context):
    global user
    user = User(update.message.chat_id, 0, 0, '', [])
    user.users[update.message.chat_id].change = 1
    step_1(update, context)

def edit_e_f(update, context):
    global user, args_4_create, evs
    menu = make_menu(update.message.chat_id, buttons=[button_opt_edit[0]], while_edit=1)
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
    if user.users[update.message.chat_id].change == 1:
        user.users[update.message.chat_id].deep = 20
        user.users[update.message.chat_id].change = 0
        user.users[update.message.chat_id].previous = update.message.text
        if evs[update.message.text].host_id == update.message.chat_id or admin == update.message.chat_id:
            text = options_str[1]+old_option+user.users[update.message.chat_id].previous
            m_send(update, context, text, reply_markup)
        else:
            context.bot.send_message(update.message.text, fail_right_4_edit_e)
            user = User(update.message.chat_id, 0, 0, '', [])
    elif user.users[update.message.chat_id].deep == 20:
        if update.message.text != button_opt_edit[0]:
            args_4_create['name'] = update.message.text
        else:
            args_4_create['name'] = user.users[update.message.chat_id].previous
        obj_ev = evs.pop(user.users[update.message.chat_id].previous)
        obj_ev.name = args_4_create['name']
        evs[args_4_create['name']] = obj_ev
        curr_index = Event.evs_names.index(user.users[update.message.chat_id].previous)
        del Event.evs_names[curr_index]
        Event.evs_names.insert(curr_index, args_4_create['name'])
        user.users[update.message.chat_id].deep = 21
        text = options_str[2] + old_option + evs[args_4_create['name']].address
        print(evs)
        m_send(update, context, text, reply_markup)
    elif user.users[update.message.chat_id].deep == 21:
        if update.message.text != button_opt_edit[0]:
            args_4_create['address'] = update.message.text
        else:
            args_4_create['address'] = evs[args_4_create['name']].address
        user.users[update.message.chat_id].deep = 22
        text = options_str[3]+old_option+str(evs[args_4_create['name']].date)
        m_send(update, context, text, reply_markup)
    elif user.users[update.message.chat_id].deep == 22:
        if update.message.text != button_opt_edit[0]:
            t = update.message.text.split(',')
            try:
                if len(t) == 4:
                    args_4_create['date'] = make_date(int(t[0]), int(t[1]), int(t[2]), int(t[3]))
                else:
                    args_4_create['date'] = make_date(int(t[0]), int(t[1]), int(t[2]))
            except (IndexError, ValueError):
                m_send(update, context, options_fail)
            else:
                user.users[update.message.chat_id].deep = 23
                text = options_str[4] + old_option + evs[args_4_create['name']].description
                m_send(update, context, text, reply_markup)
        else:
            args_4_create['date'] = evs[args_4_create['name']].date
            user.users[update.message.chat_id].deep = 23
            text = options_str[4] + old_option + evs[args_4_create['name']].description
            m_send(update, context, text, reply_markup)
    elif user.users[update.message.chat_id].deep == 23:
        if update.message.text != button_opt_edit[0]:
            args_4_create['description'] = update.message.text
        else:
            args_4_create['description'] = evs[args_4_create['name']].description
        user.users[update.message.chat_id].deep = 24
        menu = make_menu(update.message.chat_id, buttons=[button_opt_edit[1]], while_edit=1)
        reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
        m_send(update, context, options_almost, reply_markup)
    elif user.users[update.message.chat_id].deep == 24 and update.message.text == button_opt_edit[1]:
        evs[args_4_create['name']].address = args_4_create['address']
        evs[args_4_create['name']].date = args_4_create['date']
        evs[args_4_create['name']].description = args_4_create['description']
        user = User(update.message.chat_id, 0, 0, '', [])
        menu = make_menu(update.message.chat_id, while_edit=1)
        reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
        m_send(update, context, options_edit_succ, reply_markup)


# Functions for delete events in bot
def destroy_e_f(update, context):
    global user
    user.users[update.message.chat_id].change = -1
    step_1(update, context)

def succ_destroy_e_f(update, context):
    global user, evs
    user.users[update.message.chat_id].change = 0
    evs.pop(update.message.text)
    Event.evs_names.remove(update.message.text)
    menu = make_menu(update.message.chat_id, while_edit=1)
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True, one_time_keyboard=True)
    m_send(update, context, destroy_succ, reply_markup)

def see_my_host(update, context):
    global user, evs
    text = ''
    for i in evs:
        if update.message.chat_id == evs[i].host_id:
            print(evs[i].nicknames)
            text += "–ù–∞ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ`" + i + "`–∑–∞–ø–∏—Å–∞–ª–∏—Å—å:\n" + '\n@'.join(evs[i].nicknames) + '\n'
    m_send(update, context, text)


# Filters for handlers
class F_step1(BaseFilter):
    def filter(self, message):
        return x in message.text

class F_step_e(BaseFilter):
    def filter(self, message):
        return not re.match(begin, message.text) and not x in message.text and \
               not see_my_e in message.text and not password in message.text and button_opt[0] != message.text and \
                not pass_determine in message.text and not show_org in message.text and \
               not pass_edit in message.text

class F_see_my_e(BaseFilter):
    def filter(self, message):
        return see_my_e in message.text

class F_to_create_e(BaseFilter):
    def filter(self, message):
        return button_opt[0] in message.text

class F_to_to_create_e(BaseFilter):
    def filter(self, message):
        return password in message.text

class F_to_destroy_e(BaseFilter):
    def filter(self, message):
        return pass_determine in message.text

class F_to_to_edit_e(BaseFilter):
    def filter(self, message):
        return pass_edit in message.text

class F_to_see_my_host(BaseFilter):
    def filter(self, message):
        return show_org in message.text



ff_step1 = F_step1()
ff_step_e = F_step_e()
ff_see_my_e = F_see_my_e()
ff_to_to_edit_e = F_to_to_edit_e()

ff_to_create_e = F_to_create_e()
ff_to_to_create_e = F_to_to_create_e()
ff_to_destroy_e = F_to_destroy_e()

ff_to_see_my_host = F_to_see_my_host()

st_handler = CommandHandler('start', start)
st_handler2 = MessageHandler(Filters.regex(begin), start)

to_e_handler = MessageHandler(ff_step1, step_1)
in_e_handler = MessageHandler(ff_step_e, step_in_e)
see_my_e_handler = MessageHandler(ff_see_my_e, see_my_e_f)

begin_create_e_handler = MessageHandler(ff_to_to_create_e, begin_create_e_f)
to_create_e_handler = MessageHandler(ff_to_create_e, to_create_e_f)
to_destroy_e_handler = MessageHandler(ff_to_destroy_e, destroy_e_f)
to_to_edit_e_handler = MessageHandler(ff_to_to_edit_e, to_to_edit_e_f)

to_see_my_host_handler = MessageHandler(ff_to_see_my_host, see_my_host)

welc_handler = MessageHandler(Filters.regex(welcom), welc_ans)
how_a_u_handler = MessageHandler(Filters.regex(a_che_tam), how_a_u)
wrong_handler = MessageHandler(Filters.command, wrong_ans)


for i in (
        st_handler, st_handler2, wrong_handler, welc_handler, how_a_u_handler,
        to_e_handler, in_e_handler, see_my_e_handler,
        begin_create_e_handler, to_create_e_handler, to_destroy_e_handler,
        to_see_my_host_handler, to_to_edit_e_handler
    ):
    dispatcher.add_handler(i)

updater.start_polling()
